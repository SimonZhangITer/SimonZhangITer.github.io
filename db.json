{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"themes/nextd/source/index.html","path":"index.html","modified":0,"renderable":1},{"_id":"themes/nextd/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/black.jpg","path":"images/black.jpg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/avatar.ico","path":"static/avatar.ico","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/pay/wPay.jpg","path":"images/pay/wPay.jpg","modified":0,"renderable":1},{"_id":"themes/nextd/source/images/pay/aPay.jpg","path":"images/pay/aPay.jpg","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/app.74f5d7a43a1ed1364f47.js","path":"static/js/app.74f5d7a43a1ed1364f47.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/app.74f5d7a43a1ed1364f47.js.map","path":"static/js/app.74f5d7a43a1ed1364f47.js.map","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/manifest.9529941c6240803f0263.js","path":"static/js/manifest.9529941c6240803f0263.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/manifest.9529941c6240803f0263.js.map","path":"static/js/manifest.9529941c6240803f0263.js.map","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css","path":"static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css.map","path":"static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css.map","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/vendor.e492eadc007c45979f70.js","path":"static/js/vendor.e492eadc007c45979f70.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/nextd/source/static/js/vendor.e492eadc007c45979f70.js.map","path":"static/js/vendor.e492eadc007c45979f70.js.map","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490506154000},{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490336465000},{"_id":"themes/nextd/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1490581637000},{"_id":"themes/nextd/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1490581637000},{"_id":"themes/nextd/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1490581637000},{"_id":"themes/nextd/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1490581637000},{"_id":"themes/nextd/_config.yml","hash":"c11ed755fce7bddb2a1fe688fa9f8e2c49c84a8d","modified":1492051409000},{"_id":"themes/nextd/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1490581637000},{"_id":"themes/nextd/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1490581637000},{"_id":"themes/nextd/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1490581637000},{"_id":"themes/nextd/README.md","hash":"bd6075bacc240d7382755c481e05eec74d27fd0a","modified":1490581637000},{"_id":"themes/nextd/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1490581637000},{"_id":"themes/nextd/package.json","hash":"079943473ef3abcec920cc638eefcce0aed44ef3","modified":1490581637000},{"_id":"source/_posts/JS-obj-creation-maintenance-analysis.md","hash":"855b402147114bf194033d4679e5cf8e0405c1f2","modified":1491642080000},{"_id":"source/_posts/you-donot-konw-this.md","hash":"7ce3721eebb2dc82fcd715f0ae24652cc7e9e3e5","modified":1493699164000},{"_id":"source/_posts/echartsDashboard.md","hash":"384099416de73281b6c7bca10cbb47e01143b7cb","modified":1491641834000},{"_id":"source/_posts/es6-statement.md","hash":"73dce43c99a12e9b3b2e2f7c3d61f301813081b4","modified":1491641763000},{"_id":"source/_posts/eleme.md","hash":"76a6e99923876d662d8d59c3d52e7e6638cb2db1","modified":1491641834000},{"_id":"source/about/index.md","hash":"8573389e4b2549cbb5da28922fbc34db13196849","modified":1491644679000},{"_id":"source/tags/index.md","hash":"93a666dfdb093b7c67fe0a051c626eb4add27ef0","modified":1490693009000},{"_id":"source/categories/index.md","hash":"e705d9e9c038db38a4ce479251d67a90007f6068","modified":1490693031000},{"_id":"themes/nextd/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1490581637000},{"_id":"themes/nextd/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1490581637000},{"_id":"themes/nextd/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1491816792000},{"_id":"themes/nextd/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1490581637000},{"_id":"themes/nextd/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1490581637000},{"_id":"themes/nextd/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1490581637000},{"_id":"themes/nextd/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1490581637000},{"_id":"themes/nextd/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1490581637000},{"_id":"themes/nextd/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1490581637000},{"_id":"themes/nextd/languages/zh-Hans.yml","hash":"ebad11bad28d1dbd70a1cc6763f67716e8ceec62","modified":1490581637000},{"_id":"themes/nextd/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1490581637000},{"_id":"themes/nextd/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1490581637000},{"_id":"themes/nextd/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1490581637000},{"_id":"themes/nextd/layout/_layout.swig","hash":"50f850c76144a1b4a94cff9c2e10b179c69c5539","modified":1490581637000},{"_id":"themes/nextd/layout/category.swig","hash":"c63450d31e113b9543cf92d806963d2ae7a2c6eb","modified":1490581637000},{"_id":"themes/nextd/layout/index.swig","hash":"c9370003c35aedd40c480f0ec43e33280239b915","modified":1490581637000},{"_id":"themes/nextd/layout/archive.swig","hash":"fae443d2db571970e7bd0e8ca9a3378116680f31","modified":1490582762000},{"_id":"themes/nextd/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1490581637000},{"_id":"themes/nextd/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1490581637000},{"_id":"themes/nextd/layout/page.swig","hash":"90272523f9d943157a675369474b643e734ab23e","modified":1491643458000},{"_id":"themes/nextd/layout/tag.swig","hash":"57f78197aa72e6b3d9ca87dcb81688c8b9ab295b","modified":1490581637000},{"_id":"themes/nextd/layout/post.swig","hash":"f50109a6d61e07c7ec9fa87c22f8a4b906de7fab","modified":1491817548000},{"_id":"themes/nextd/source/index.html","hash":"d2a08c1ff30b8af5d8a14b8cd3e5de595a6bbe61","modified":1492051575000},{"_id":"themes/nextd/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1490581637000},{"_id":"themes/nextd/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1490581637000},{"_id":"themes/nextd/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1490581637000},{"_id":"themes/nextd/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490581637000},{"_id":"themes/nextd/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490581637000},{"_id":"themes/nextd/layout/_macro/post.swig","hash":"1d495b96bc67aec55f9717b43e1604c089b1cafd","modified":1491815417000},{"_id":"themes/nextd/layout/_macro/post-header.swig","hash":"25e51ae2fd15c33bd51c3105a6e3bf310f8f3138","modified":1491901789000},{"_id":"themes/nextd/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/comments.swig","hash":"e688d3e35769501be0cd67b88acba79d6b98fdb3","modified":1491796366000},{"_id":"themes/nextd/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1490581637000},{"_id":"themes/nextd/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1490581637000},{"_id":"themes/nextd/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/footer.swig","hash":"d325db5370005461e3e4359ef4590773e6439526","modified":1491818402000},{"_id":"themes/nextd/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/header.swig","hash":"e04f20bfc874bc0063a3b384c2e181695bf00ce4","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1490581637000},{"_id":"themes/nextd/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1490581637000},{"_id":"themes/nextd/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1490581637000},{"_id":"themes/nextd/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1490581637000},{"_id":"themes/nextd/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1490581637000},{"_id":"themes/nextd/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1490581637000},{"_id":"themes/nextd/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1490581637000},{"_id":"themes/nextd/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1490581637000},{"_id":"themes/nextd/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490581637000},{"_id":"themes/nextd/source/images/avatar.jpeg","hash":"91cc12070cc08216e3105488e283e1978e6222a5","modified":1487740438000},{"_id":"themes/nextd/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490581637000},{"_id":"themes/nextd/source/images/black.jpg","hash":"89cffa9f706bbcf3c51d80686748a7f81c18fa36","modified":1491638738000},{"_id":"themes/nextd/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490581637000},{"_id":"themes/nextd/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490581637000},{"_id":"themes/nextd/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490581637000},{"_id":"themes/nextd/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490581637000},{"_id":"themes/nextd/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490581637000},{"_id":"themes/nextd/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490581637000},{"_id":"themes/nextd/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490581637000},{"_id":"themes/nextd/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490581637000},{"_id":"themes/nextd/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490581637000},{"_id":"themes/nextd/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490581637000},{"_id":"themes/nextd/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490581637000},{"_id":"themes/nextd/source/static/avatar.ico","hash":"273030a2cd32e074658d4bad5b6ba96968ec2bc2","modified":1491637530000},{"_id":"themes/nextd/test/nextd_home_preview.jpg","hash":"5330f0a0abc72d8b6fb6f22ff422854d9e59963b","modified":1490581637000},{"_id":"themes/nextd/test/nextd_post_preview.jpg","hash":"01a99326013f75a6f8980751c6c8ea322e890857","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490581637000},{"_id":"themes/nextd/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1490581637000},{"_id":"themes/nextd/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/search/localsearch.swig","hash":"ae7ace1cb38cc4016906b974e7b9cef7351a8d30","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1490581637000},{"_id":"themes/nextd/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments.swig","hash":"2ec25e08d995f555483c9af1bd26bbcd45f33c2d","modified":1491796382000},{"_id":"themes/nextd/layout/_scripts/third-party/localsearch.swig","hash":"3d66847fccd6a7c4501919e417fc55e983f24271","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1490581637000},{"_id":"themes/nextd/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490581637000},{"_id":"themes/nextd/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1490581637000},{"_id":"themes/nextd/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1490581637000},{"_id":"themes/nextd/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1490581637000},{"_id":"themes/nextd/source/css/_variables/Pisces.styl","hash":"f32e468a74416e71411ba14df0b11e0d9b25142a","modified":1490581637000},{"_id":"themes/nextd/source/css/_variables/base.styl","hash":"83ab2cf72c5c427d2bfa8e3b143bedb39c0e22b1","modified":1491902144000},{"_id":"themes/nextd/source/images/pay/wPay.jpg","hash":"f6518ebb43cf837a9aa57a1673b08bc4c2706047","modified":1490688337000},{"_id":"themes/nextd/source/images/pay/aPay.jpg","hash":"e8bab9d10525958cb6e0b59cf7f87f2f961287bc","modified":1490688262000},{"_id":"themes/nextd/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490581637000},{"_id":"themes/nextd/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1490581637000},{"_id":"themes/nextd/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490581637000},{"_id":"themes/nextd/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490581637000},{"_id":"themes/nextd/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1490581637000},{"_id":"themes/nextd/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490581637000},{"_id":"themes/nextd/source/js/src/motion.js","hash":"68b78d70d57e29e45df15439e3d82592df08adc0","modified":1490581637000},{"_id":"themes/nextd/source/js/src/bootstrap.js","hash":"6c9ac964b6d49629ec873c19b568bca6fdc50ab7","modified":1490581637000},{"_id":"themes/nextd/source/js/src/post-details.js","hash":"b4a1d9bff08d0d3fbc12ab955c5cfff1042e63ae","modified":1490581637000},{"_id":"themes/nextd/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490581637000},{"_id":"themes/nextd/source/js/src/utils.js","hash":"dc243a9202171ef938b3752e85c025127a3bead6","modified":1490581637000},{"_id":"themes/nextd/source/static/js/app.74f5d7a43a1ed1364f47.js","hash":"7d3387c7e8febe60a295f4b4510d8b6af249a0f8","modified":1491639738000},{"_id":"themes/nextd/source/static/js/app.74f5d7a43a1ed1364f47.js.map","hash":"f896a681a75824e8812e43cd3e9076b8c24e0cbd","modified":1491637530000},{"_id":"themes/nextd/source/static/js/manifest.9529941c6240803f0263.js","hash":"9d40bedc22c66328b200f78da88a241a9514202c","modified":1491637530000},{"_id":"themes/nextd/source/static/js/manifest.9529941c6240803f0263.js.map","hash":"cf53325c3ba37350a47d79d1d68f0489f5576773","modified":1491637530000},{"_id":"themes/nextd/source/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css","hash":"8e1944111490e05c2d5d019aa99227f28e420a4b","modified":1491637530000},{"_id":"themes/nextd/source/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css.map","hash":"61b8da67e7dd58cd70b9b52f82548595d0408d14","modified":1491637530000},{"_id":"themes/nextd/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490581637000},{"_id":"themes/nextd/source/static/js/vendor.e492eadc007c45979f70.js","hash":"d0b5b9e0de7fb2fea0e11a5d22fbb26879f2ea21","modified":1491637530000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/livere.swig","hash":"f3e00c2f47d3d5ee348e992d424d82da90a64073","modified":1491804163000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/neteasecloud.swig","hash":"ff4a93276cf4c6f70277282057a812c276744639","modified":1490670465000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1490581637000},{"_id":"themes/nextd/layout/_scripts/third-party/comments/youyan.swig","hash":"6784d87325b1ee97e576e4d44af817250cfa01df","modified":1490688493000},{"_id":"themes/nextd/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/outline/outline.styl","hash":"09b4f9ab36c3dcbe0682a026929a2e9612346f7f","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/scaffolding/base.styl","hash":"0db9d5cab03e3c9195a6be300acad3a43b57c910","modified":1491638393000},{"_id":"themes/nextd/source/css/_common/scaffolding/helpers.styl","hash":"bd256c3b7544879ae49105d13f7f0fe4c0d31177","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/_brand.styl","hash":"7ed4bdd5add92e4c232fd15644455e65e3b404ba","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/_menu.styl","hash":"7b6b0bfd33cc04c3575498c93a3e692c48bba419","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/_posts.styl","hash":"dd94cb1457ec9f107beb43b552341012ce5b651e","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/index.styl","hash":"c05973bf3ed8cc7dd574b039ec02177fef70b7ed","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Pisces/_layout.styl","hash":"a2617e21644f7a95b025f9d99d9c456bd978f688","modified":1490670307000},{"_id":"themes/nextd/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490581637000},{"_id":"themes/nextd/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1490581637000},{"_id":"themes/nextd/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490581637000},{"_id":"themes/nextd/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490581637000},{"_id":"themes/nextd/source/js/src/schemes/pisces.js","hash":"72b3c235dee064500d6a2906cadf8ea898d3c05b","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1490581637000},{"_id":"themes/nextd/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/header/headerband.styl","hash":"db6b4eb9418964cb802a9882ff33e6f836e4b150","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/header/site-home.styl","hash":"ecbd5a2dcc458c72e32a275609b3bf67fe80767d","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/header/menu.styl","hash":"09ba4b344fec0b525aa4700048ee2dd47d0a2ab3","modified":1490601302000},{"_id":"themes/nextd/source/css/_common/components/header/header.styl","hash":"d73a031069873a6afbd4cd8e434d0daa1345811b","modified":1490671268000},{"_id":"themes/nextd/source/css/_common/components/header/site-nav.styl","hash":"ad5d3a4a9906397d902d19c5d37420f41ae45746","modified":1490671356000},{"_id":"themes/nextd/source/css/_common/components/header/site-meta.styl","hash":"2502272eabb7013c0ff25fb073d80f72afe9e3dd","modified":1490601609000},{"_id":"themes/nextd/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-header.styl","hash":"9a7f3fe82cc4aa35b9cdd17ba886022a17a282a5","modified":1491901659000},{"_id":"themes/nextd/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-expand.styl","hash":"668771c6cf4fc3b592ff5eb2a6d40454f6a1cb76","modified":1491638284000},{"_id":"themes/nextd/source/css/_common/components/post/post-meta.styl","hash":"93f75858566d22a0ff66b37247917991d28ce2e3","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-reward.styl","hash":"40b582908e7b221b2bee7ae48da6f847ea7e9f85","modified":1490689066000},{"_id":"themes/nextd/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/post/post.styl","hash":"1d9e937269df9e40f388fce1933fa40b2676f88e","modified":1491638317000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9a64f8c60e6149500792557d57b9fa3dc3f04cb2","modified":1490591779000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"ac74d5a20194b47cdb3d6540c64e4b1c432496ca","modified":1491903102000},{"_id":"themes/nextd/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/tags/group-pictures.styl","hash":"dc7a7bbfa5c8d05055c67b62fc1fae0af4317947","modified":1491638381000},{"_id":"themes/nextd/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/localsearch.styl","hash":"777e6e00ef02056bf07e96e93be826e4da464b10","modified":1490581637000},{"_id":"themes/nextd/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1490581637000},{"_id":"themes/nextd/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490581637000},{"_id":"themes/nextd/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1490581637000},{"_id":"themes/nextd/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490581637000},{"_id":"themes/nextd/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1490581637000},{"_id":"themes/nextd/source/static/js/vendor.e492eadc007c45979f70.js.map","hash":"c2b5501bd575e4d6df8ea821d245aa9cd67b62f6","modified":1491637530000},{"_id":"public/baidusitemap.xml","hash":"b16636c98e6baf1008bef928143bde7b0757d27f","modified":1493699831826},{"_id":"public/sitemap.xml","hash":"75a9ea6d78f4dffeee4f6e6eea1a746266604690","modified":1493699831832},{"_id":"public/tags/index.html","hash":"e74dd4fc182f916a338115c60950b496986d1fc6","modified":1493699831868},{"_id":"public/categories/index.html","hash":"a894e3a6c8562af33268fc0ebc32e2081c39677a","modified":1493699831869},{"_id":"public/archives/2017/02/index.html","hash":"bde9ce85770f6486c57519b9591fc9cc18b150d5","modified":1493699831869},{"_id":"public/archives/2017/03/index.html","hash":"38a70a637e1f6de6f0a7eb7f45ac7702d809a0e8","modified":1493699831869},{"_id":"public/archives/2017/05/index.html","hash":"00848f8f755681d88c40d0faa121f668e4c5e83a","modified":1493699831869},{"_id":"public/categories/Vue/index.html","hash":"11eb54c09530e2c62727f713c1ea4fdbb0c3c2c5","modified":1493699831869},{"_id":"public/categories/vue/index.html","hash":"a146ebcf2fb292022ead5cba33385184e2c18bf4","modified":1493699831869},{"_id":"public/tags/vue/index.html","hash":"5a4d35f1b9fd6c54eebaff9f96651c2faa9c8616","modified":1493699831869},{"_id":"public/tags/vue-router/index.html","hash":"a85a3c9dd5765a68eb4e3b04e31bfd0daf16a692","modified":1493699831869},{"_id":"public/tags/vuex/index.html","hash":"af986d287a377780b078cbbe50dd9ae88e2977d8","modified":1493699831869},{"_id":"public/tags/echarts/index.html","hash":"7fc673119d2e61f3acbaa75a5478b748a0ff95b7","modified":1493699831869},{"_id":"public/tags/axios/index.html","hash":"a1ed52e01772450b5df635ef19b9027e35301716","modified":1493699831869},{"_id":"public/about/index.html","hash":"78a4fe5ffb71f8aed942b160178a1f11d0d313d8","modified":1493699831869},{"_id":"public/2017/05/02/you-donot-konw-this/index.html","hash":"e3a3edd94f8e756ee0e3298a59e6f7e42e8c2b45","modified":1493699831869},{"_id":"public/2017/03/24/eleme/index.html","hash":"24400e4c41c48b315386bceb1e73332aa75e4f0f","modified":1493699831869},{"_id":"public/2017/02/14/echartsDashboard/index.html","hash":"3ea85f980db9659b43b0c0ae7653468cc3ddf443","modified":1493699831869},{"_id":"public/2016/09/12/es6-statement/index.html","hash":"ce137b3c280c10204987204b1624401dcf66e9e1","modified":1493699831869},{"_id":"public/2016/09/07/JS-obj-creation-maintenance-analysis/index.html","hash":"69c857d13278deb69fb5ca8b2addcc1a82068c02","modified":1493699831869},{"_id":"public/archives/index.html","hash":"587bae59a4785c41a39fc7cce2f45326bade7deb","modified":1493699831869},{"_id":"public/archives/2016/index.html","hash":"31b21393db24649bbe6b5001b9127193d649e692","modified":1493699831870},{"_id":"public/archives/2016/09/index.html","hash":"92668a2ef99dcf7731ed4d24eebb6433fb408d38","modified":1493699831870},{"_id":"public/archives/2017/index.html","hash":"7be333a68347ffddf6ac4d0ad74f0e22441edff5","modified":1493699831870},{"_id":"public/categories/JavaScript/index.html","hash":"66d31fa3b352f2a6c894c6803db1533c2f9a04b9","modified":1493699831870},{"_id":"public/tags/JavaScript/index.html","hash":"b35646423d8eae52c0c3fb4807ad259e2b564675","modified":1493699831870},{"_id":"public/tags/ES6/index.html","hash":"4c634941f88bcd4138265688b9589daddf607362","modified":1493699831870},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493699831870},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493699831870},{"_id":"public/tags/webpack/index.html","hash":"c85ab7781bef92d07a9b60c39c0c4f83c1024fe3","modified":1493699831877},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1493699831877},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493699831877},{"_id":"public/images/avatar.jpeg","hash":"91cc12070cc08216e3105488e283e1978e6222a5","modified":1493699831877},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1493699831877},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1493699831877},{"_id":"public/images/black.jpg","hash":"89cffa9f706bbcf3c51d80686748a7f81c18fa36","modified":1493699831878},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1493699831878},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1493699831878},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1493699831878},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1493699831878},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493699831878},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493699831878},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1493699831878},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1493699831878},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493699831878},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1493699831878},{"_id":"public/static/avatar.ico","hash":"273030a2cd32e074658d4bad5b6ba96968ec2bc2","modified":1493699831878},{"_id":"public/images/pay/wPay.jpg","hash":"f6518ebb43cf837a9aa57a1673b08bc4c2706047","modified":1493699831878},{"_id":"public/images/pay/aPay.jpg","hash":"e8bab9d10525958cb6e0b59cf7f87f2f961287bc","modified":1493699831878},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1493699831878},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1493699831878},{"_id":"public/static/js/app.74f5d7a43a1ed1364f47.js.map","hash":"f896a681a75824e8812e43cd3e9076b8c24e0cbd","modified":1493699831878},{"_id":"public/static/js/manifest.9529941c6240803f0263.js.map","hash":"cf53325c3ba37350a47d79d1d68f0489f5576773","modified":1493699831878},{"_id":"public/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css.map","hash":"61b8da67e7dd58cd70b9b52f82548595d0408d14","modified":1493699831878},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493699831878},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493699831878},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493699831878},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493699831878},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493699831878},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493699831878},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1493699831878},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493699831878},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1493699832483},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1493699832486},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1493699832490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1493699832490},{"_id":"public/index.html","hash":"d2a08c1ff30b8af5d8a14b8cd3e5de595a6bbe61","modified":1493699832493},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493699832493},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493699832493},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1493699832494},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1493699832494},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1493699832494},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1493699832494},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1493699832494},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1493699832494},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1493699832494},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1493699832494},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1493699832494},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1493699832494},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1493699832494},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1493699832495},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1493699832495},{"_id":"public/js/src/motion.js","hash":"68b78d70d57e29e45df15439e3d82592df08adc0","modified":1493699832495},{"_id":"public/js/src/bootstrap.js","hash":"6c9ac964b6d49629ec873c19b568bca6fdc50ab7","modified":1493699832495},{"_id":"public/js/src/post-details.js","hash":"b4a1d9bff08d0d3fbc12ab955c5cfff1042e63ae","modified":1493699832495},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1493699832495},{"_id":"public/js/src/utils.js","hash":"dc243a9202171ef938b3752e85c025127a3bead6","modified":1493699832495},{"_id":"public/static/js/app.74f5d7a43a1ed1364f47.js","hash":"7d3387c7e8febe60a295f4b4510d8b6af249a0f8","modified":1493699832495},{"_id":"public/static/js/manifest.9529941c6240803f0263.js","hash":"9d40bedc22c66328b200f78da88a241a9514202c","modified":1493699832495},{"_id":"public/static/css/app.c71cd16bc42ffab69fd3b31f4923f5f3.css","hash":"8e1944111490e05c2d5d019aa99227f28e420a4b","modified":1493699832495},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1493699832495},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493699832495},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1493699832495},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1493699832495},{"_id":"public/js/src/schemes/pisces.js","hash":"72b3c235dee064500d6a2906cadf8ea898d3c05b","modified":1493699832495},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1493699832495},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493699832495},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493699832495},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1493699832495},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1493699832495},{"_id":"public/css/main.css","hash":"293de7b74f291154c96b1c1df755d255efd4455a","modified":1493699832495},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1493699832495},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1493699832495},{"_id":"public/static/js/vendor.e492eadc007c45979f70.js","hash":"d0b5b9e0de7fb2fea0e11a5d22fbb26879f2ea21","modified":1493699832496},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493699832496},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1493699832496},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1493699832496},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1493699832496},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1493699832496},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1493699832496},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1493699832496},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1493699832496},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1493699832496},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1493699832502},{"_id":"public/static/js/vendor.e492eadc007c45979f70.js.map","hash":"c2b5501bd575e4d6df8ea821d245aa9cd67b62f6","modified":1493699832517}],"Category":[{"name":"JavaScript","_id":"cj272b9fq0002zsyf6ub7p74i"},{"name":"Vue","_id":"cj272b9jv000izsyfdmymersz"},{"name":"vue","_id":"cj272b9jz000pzsyf9axup1rn"}],"Data":[],"Page":[{"title":"about","date":"2017-03-28T08:26:58.000Z","type":"about","comments":0,"_content":"\n# About Me\n\n上个世纪九十年代出生在一个不知名的小镇，现在居住上海\n\n15年7月毕业于东北大学，在线期间疯狂写Java和算法，毕业之后机缘巧合入了前端，然后就是一入前端深似海呀 -_-|\n\n平时喜欢研究新的技术，忠于原生JavaScript、Vue\n\n\n# The Purpose Of This Site\n\n\n总结技术、分享技术、交流技术\n\n笨鸟不止要先飞，也得多飞\n\n欢迎志同道合的朋友一起交流^_^\n\n\n\n# Contact Me\n\n- Email: simonzhangr@foxmail.com\n- QQ: 745913574\n- Wechat: Calm10-01\n\n路还很远，但在路上，继续前行\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-28 16:26:58\ntype: \"about\"\ncomments: false\n---\n\n# About Me\n\n上个世纪九十年代出生在一个不知名的小镇，现在居住上海\n\n15年7月毕业于东北大学，在线期间疯狂写Java和算法，毕业之后机缘巧合入了前端，然后就是一入前端深似海呀 -_-|\n\n平时喜欢研究新的技术，忠于原生JavaScript、Vue\n\n\n# The Purpose Of This Site\n\n\n总结技术、分享技术、交流技术\n\n笨鸟不止要先飞，也得多飞\n\n欢迎志同道合的朋友一起交流^_^\n\n\n\n# Contact Me\n\n- Email: simonzhangr@foxmail.com\n- QQ: 745913574\n- Wechat: Calm10-01\n\n路还很远，但在路上，继续前行\n","updated":"2017-04-08T09:44:39.000Z","path":"about/index.html","layout":"page","_id":"cj272b9jo000fzsyfs7nmb6ig","content":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><p>上个世纪九十年代出生在一个不知名的小镇，现在居住上海</p>\n<p>15年7月毕业于东北大学，在线期间疯狂写Java和算法，毕业之后机缘巧合入了前端，然后就是一入前端深似海呀 -_-|</p>\n<p>平时喜欢研究新的技术，忠于原生JavaScript、Vue</p>\n<h1 id=\"The-Purpose-Of-This-Site\"><a href=\"#The-Purpose-Of-This-Site\" class=\"headerlink\" title=\"The Purpose Of This Site\"></a>The Purpose Of This Site</h1><p>总结技术、分享技术、交流技术</p>\n<p>笨鸟不止要先飞，也得多飞</p>\n<p>欢迎志同道合的朋友一起交流^_^</p>\n<h1 id=\"Contact-Me\"><a href=\"#Contact-Me\" class=\"headerlink\" title=\"Contact Me\"></a>Contact Me</h1><ul>\n<li>Email: simonzhangr@foxmail.com</li>\n<li>QQ: 745913574</li>\n<li>Wechat: Calm10-01</li>\n</ul>\n<p>路还很远，但在路上，继续前行</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><p>上个世纪九十年代出生在一个不知名的小镇，现在居住上海</p>\n<p>15年7月毕业于东北大学，在线期间疯狂写Java和算法，毕业之后机缘巧合入了前端，然后就是一入前端深似海呀 -_-|</p>\n<p>平时喜欢研究新的技术，忠于原生JavaScript、Vue</p>\n<h1 id=\"The-Purpose-Of-This-Site\"><a href=\"#The-Purpose-Of-This-Site\" class=\"headerlink\" title=\"The Purpose Of This Site\"></a>The Purpose Of This Site</h1><p>总结技术、分享技术、交流技术</p>\n<p>笨鸟不止要先飞，也得多飞</p>\n<p>欢迎志同道合的朋友一起交流^_^</p>\n<h1 id=\"Contact-Me\"><a href=\"#Contact-Me\" class=\"headerlink\" title=\"Contact Me\"></a>Contact Me</h1><ul>\n<li>Email: simonzhangr@foxmail.com</li>\n<li>QQ: 745913574</li>\n<li>Wechat: Calm10-01</li>\n</ul>\n<p>路还很远，但在路上，继续前行</p>\n"},{"title":"tags","date":"2017-03-28T08:21:17.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-28 16:21:17\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-28T09:23:29.000Z","path":"tags/index.html","layout":"page","_id":"cj272b9jr000hzsyf038vpprl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-03-28T08:14:01.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-28 16:14:01\ntype: categories\ncomments: false\n---\n","updated":"2017-03-28T09:23:51.000Z","path":"categories/index.html","layout":"page","_id":"cj272b9jw000lzsyfxp0foizt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript对象的的创建及属性状态维护分析","cover":"http://bpic.588ku.com/back_pic/04/38/81/91584d04816eb9a.jpg","_content":"在说属性之前，我们先来了解一下ES5的新方法,Object.create()函数。\n# 新的对象创建方法\n在旧的“原型继承”观念中，它的本质上是“复制原型”，即：以原型为模板复制一个新的对象。然而我们应该注意到一点事实：在这个思路上，“构造器函数”本身是无意义的。更确切的说，构造器函数对实例的修饰作用可有可无，例如：\n\n``` javascript\n//在构造器中修饰对象实例\nfunction MyObject(){\n\tthis.yyy = ...;\n}\n```\n当意识到这一点后，ES5实现Object.cerate()这样一种简单的方法，通过这一方法将“构造器函数”从对象创建过程中赶了出去。在新的机制中，对象变成了简单的“原型继承+属性定义”，而不再需要“构造器”这样一层语义，例如：\n\n``` javascript\n//新的对象创建方法\nnewObj = Object.create(prototypeObj,PropertyDescriptors);\n```\n这里的PropertyDescriptors是一组属性描述符，用于声明基于prototypeObj这个原型之上的一些新的属性添加或修改，它与defineProperties()方法中的props参数是一样的，并在事实上也将调用后者。它的用法如下例所示：\n\n``` javascript\nvar aPrototypeObject = {name1:\"value1\"};\nvar aNewInstance = Object.create(aPrototypeObject,{\n\tname2:{value:'value2'},\n\tname3:{get:function(){ return 'value3' }}\n})\n```\n\n很显然，在这种新方案中我们看不到类似MyObject()那样的构造器了。事实上在引擎实现Object.create()时也并不特别地声明某个构造器。\n\n**<font color=red >所以，所有由Object.create()创建的对象实例具有各自不同的原型（这取决于调用create()方法时传入的参数）,但它们的constractor值指向相同的引用——引擎内建的Object构造器。</font>**\n\n# 属性状态维护\nES5中在Object()上声明了三组方法，用于维护对象本身在属性方面的信息，如下表（Markdown不会使用分组列表，大家凑合看看。。如果有知道的也告诉我一下哈~）\n\n| 分类        | 方法           | 说明  |\n| ------------- |:-------------:| -----|\n|   取属性列表      | getOwnPropertyNames(obj) | 取对象自有的属性名数组 |\n| 取属性列表    | keys(obj)      |   取对象自由的、可见的属性名数组 |\n|  状态维护 |   preventExtensions(obj)    |   使实例obj不能添加新属性 |\n| 状态维护 | seal(obj) |使实例obj不能添加新属性，也不能删除既有属性 |\n| 状态维护 | freeze(obj) | 使实例obj所有属性只读，且不能再添加、删除属性 |\n| 状态检查 | isExtensible(obj) | 返回preventExtensions状态 |\n| 状态检查 | isSealed(obj) | 返回seal状态 |\n| 状态检查 | isFrozen(obj) | 返回freeze状态  |\n其中，preventExtensions、seal和freeze三种状态都是针对对象来操作的，会影响到所有属性的性质的设置。需要强调的有两点：\n\n* 由原型继承来的性质同样会受到影响\n* 以当前对象作为原型时，子类可以通过重新定义同名属性来覆盖这些状态\n\n更进一步的说，这三种状态是无法影响子类使用defineProperty()和defineProperties()来“重新定义（覆盖）”同名属性的。\n\n本质上说，delete运算是用于删除运算对象属性的属性描述符，而非某个属性。\n\n## 取属性列表\n\n取属性列表的传统方法是使用for...in语句。为方便后续讨论，我们先为该语句封装一个与Object.keys()类似的方法：\n\n``` javascript\nObject.forIn = function(obj){\n\tvar Result = [];\n\tfor(var n in obj) Result.push(n);\n\treturn Result;\n}\n```\n\nforIn()得到的总是该对象全部可见的属性列表。而keys()将是其中的一个子集，即<font color=red>\"自有的(不包括继承而来的)\"可见属性列表。</font>下面的例子将显示二者的不同：\n\n``` javascript\nvar obj1 = {n1:100};\nvar obj2 = Object.create(obj1,{n2 : {value :200,enumerable:true}});\n\n//显示'n1' , 'n2'\n//  - 其中n1继承自obj1\nalert(Object.forIn(obj2));\n\n//显示'n2'\nalert(Object.keys(obj2));\n```\ngetOwnPropertyNames()得到的与上述两种情况都不相同。它列举全部自有的属性，但无论它是否可见。也就是说，<font color=red>它是keys()所列举内容的超集，包括全部可见和不可见的、自有的属性。</font>仍以上述为例：\n\n``` javascript\n// (续上例)\n\n//定义属性名n3,其enumerable性质默认为false\nObject.defineProperty(obj2,'n3',{value:300})\n\n//仍然显示'n1','n2'\n// - 新定义的n3不可见\nalert(Object.forIn(obj2));\n\n//显示'n2'\nalert(Object.keys(obj2));\n\n//显示n2,n3\nalert(Object.getOwnPropertyNames(obj2));\n\n```\n## 使用defineProperty来维护属性的性质\n在defineProperty()或defineProperties()中操作某个属性时，如果该名字的属性未声明则新建它；如果已经存在，则使用描述符中的新的性质来覆盖旧的性质值。\n\n这也意味着一个使用\"数据属性描述符\"的属性，也可以重新使用\"存取属性描述符\"——但总的来说只能存在其中一个。例如：\n\n``` javascript\nvar pOld,pNew;\nvar obj = { data : 'oldValue'}\n\n//显示'value,writable,enumerable,configuable'\npOld = Object.getOwnPropertyDescriptor(obj,'data');\nalert(Object.keys(pOld));\n\n//步骤一：通过一个闭包来保存旧的obj.data的值\nObject.defineProperty(obj,'data',function(oldValue){\n\treturn {\n\t\tget:function(){ return oldValue},\n\t\tconfigurable:false\n\t}\n}(obj.data))\n\n//显示'get,set,enumerable,configurable'\npNew = Object.getOwnPropertyDescriptor(obj,'data');\nalert(pNew);\n\n//步骤二：测试使用重定义的getter来取obj.data的值\n// - 显示 'oldValue'\nalert(obj.data);\n\n//步骤三：（测试）尝试再次声明data属性\n// - 由于在步骤一中已经设置configurable为false，因此导致异常(can't redefine)。\nObject.defineProperty(obj,'data',{value:100});\n```\n## 对于继承自原型的属性，修改其值的效果\n\n如果某个从原型继承来的属性是可写的，并且它使用的是\"数据属性描述符\"，那么在子类中修改该值，将隐式地创建一个属性描述符。这个新属性描述符将按照\"向对象添加一个属性\"的规格来初始化。即：必然是数据属性描述符，且Writable,Enumerable和Configurable均为true值。例如：\n\n``` javascript\nvar obj1 = {n1 : 100};\nvar obj2 = Object.create(obj1);\n\n//显示为空\n// - 重置n1的enumerable性质为false，因此在obj1中是不可见的\nObject.defineProperty(obj1,'n1',{enumerable:false})\nalert(Object.keys(obj1));\n\n//显示为空\n// - n1不是obj2的自有属性\nalert(Object.getOwnPropertyNames(obj2));\n\n//显示n1\n// - 由于n1赋值导致新的属性描述符，因此n1成为了自有的属性\nobj2.n1 = 'newValue';\nalert(Object.getOwnPropertyNames(obj2));\n\n//显示n1,表明n1是可见的\n// - 由于新的属性描述符的enumerable重置为true，因此在obj2中它是可见的\nalert(Object.keys(obj2));\n```\n如果一个属性使用的是\"存取属性描述符\",那么无论它的读写性为何，都不会新建属性描述符。对子类中该属性的读写，都只会忠诚地调用（继承而来的、原型中的）读写器。\n\n## 重写原型继承来的属性的描述符\n使用defineProperty()或defineProperties()将重新定义该属性，会显式的创建一个属性描述符。在这种情况下，该属性也将变成自雷对象中\"自有的\"属性，它的可见性等性质就由新的描述符来决定。\n\n与上一小节不同的是，这与原型中该属性是否\"只读\"或是否允许修改性质(configurable)无关。\n\n这可能导致类似如下的情况：在父类中某个属性时只读的，并且不可修改其描述符性质的，但是在子类中，同一个名字的属性却可以读写并可以重新修改性质。更为严重的是，仅仅观察两个对象实例的外观，我们无法识别这种差异是如何导致的。下面的示例说明这种情况：\n\n``` javascript\nvar obj1 = {n1 : 100};\nvar obj2 = Object.create(obj1);\n\n//对于原型对象obj1,修改其属性n1的性质，使其不可列举、修改、且不能重设性质\nObject.defineProperty(obj1,'n1',{writable:false,enumerable:false,configurable:false});\n\n//显示为空,obj1.n1是不可列举的\nalert(Object.keys(obj1));\n\n//由于不可重设性质，因此对obj1.n1的下述调用将导致异常\n//Object.defineProperty(obj1,'n1',{configurable:true});\n```\n接下来我们观察\"重新定义属性\"带来的效果：\n\n``` javascript\n//(续上例)\n\n//重新定义obj2.n1\nObject.defineProperty(obj2,'n1',{value:obj2.n1,writable:true,enumerable:true,configurable:true});\n\n//显示newValue'\n// - 结论:可以通过重定义属性，使该属性从\"只读\"变成\"可读写\"（以及其他性质的变化）\nobj2.n1 = 'newValue';\nalert(obj2.n1);\n\n//列举obj2的自有性质，结果显示：n1\n// - 现在n1是自有的属性了\nalert(Object.getOwnpropertyNames(obj2));\n```\n从表面上看，一个父类中只读的属性在子类变成了可读写。而且，一旦我们用delete删除该属性，它又会恢复父类中的值和性质。例如：\n\n``` javascript\n//尝试删除该属性\n// - 显示100，即它在原型中的值\ndelete obj2.n1;\nalert(obj2.n1);\n```\n再次强调这一事实：<font color=red>在ES5中没有任何方法可以阻止上述过程。也就是说，我们无法阻止子类对父类同名属性的重定义，也无法避免这种重定义可能带来的业务逻辑问题。</font>\n","source":"_posts/JS-obj-creation-maintenance-analysis.md","raw":"---\ntitle: JavaScript对象的的创建及属性状态维护分析\ntags: [JavaScript,ES6]\ncategories: JavaScript\ncover: http://bpic.588ku.com/back_pic/04/38/81/91584d04816eb9a.jpg\n---\n在说属性之前，我们先来了解一下ES5的新方法,Object.create()函数。\n# 新的对象创建方法\n在旧的“原型继承”观念中，它的本质上是“复制原型”，即：以原型为模板复制一个新的对象。然而我们应该注意到一点事实：在这个思路上，“构造器函数”本身是无意义的。更确切的说，构造器函数对实例的修饰作用可有可无，例如：\n\n``` javascript\n//在构造器中修饰对象实例\nfunction MyObject(){\n\tthis.yyy = ...;\n}\n```\n当意识到这一点后，ES5实现Object.cerate()这样一种简单的方法，通过这一方法将“构造器函数”从对象创建过程中赶了出去。在新的机制中，对象变成了简单的“原型继承+属性定义”，而不再需要“构造器”这样一层语义，例如：\n\n``` javascript\n//新的对象创建方法\nnewObj = Object.create(prototypeObj,PropertyDescriptors);\n```\n这里的PropertyDescriptors是一组属性描述符，用于声明基于prototypeObj这个原型之上的一些新的属性添加或修改，它与defineProperties()方法中的props参数是一样的，并在事实上也将调用后者。它的用法如下例所示：\n\n``` javascript\nvar aPrototypeObject = {name1:\"value1\"};\nvar aNewInstance = Object.create(aPrototypeObject,{\n\tname2:{value:'value2'},\n\tname3:{get:function(){ return 'value3' }}\n})\n```\n\n很显然，在这种新方案中我们看不到类似MyObject()那样的构造器了。事实上在引擎实现Object.create()时也并不特别地声明某个构造器。\n\n**<font color=red >所以，所有由Object.create()创建的对象实例具有各自不同的原型（这取决于调用create()方法时传入的参数）,但它们的constractor值指向相同的引用——引擎内建的Object构造器。</font>**\n\n# 属性状态维护\nES5中在Object()上声明了三组方法，用于维护对象本身在属性方面的信息，如下表（Markdown不会使用分组列表，大家凑合看看。。如果有知道的也告诉我一下哈~）\n\n| 分类        | 方法           | 说明  |\n| ------------- |:-------------:| -----|\n|   取属性列表      | getOwnPropertyNames(obj) | 取对象自有的属性名数组 |\n| 取属性列表    | keys(obj)      |   取对象自由的、可见的属性名数组 |\n|  状态维护 |   preventExtensions(obj)    |   使实例obj不能添加新属性 |\n| 状态维护 | seal(obj) |使实例obj不能添加新属性，也不能删除既有属性 |\n| 状态维护 | freeze(obj) | 使实例obj所有属性只读，且不能再添加、删除属性 |\n| 状态检查 | isExtensible(obj) | 返回preventExtensions状态 |\n| 状态检查 | isSealed(obj) | 返回seal状态 |\n| 状态检查 | isFrozen(obj) | 返回freeze状态  |\n其中，preventExtensions、seal和freeze三种状态都是针对对象来操作的，会影响到所有属性的性质的设置。需要强调的有两点：\n\n* 由原型继承来的性质同样会受到影响\n* 以当前对象作为原型时，子类可以通过重新定义同名属性来覆盖这些状态\n\n更进一步的说，这三种状态是无法影响子类使用defineProperty()和defineProperties()来“重新定义（覆盖）”同名属性的。\n\n本质上说，delete运算是用于删除运算对象属性的属性描述符，而非某个属性。\n\n## 取属性列表\n\n取属性列表的传统方法是使用for...in语句。为方便后续讨论，我们先为该语句封装一个与Object.keys()类似的方法：\n\n``` javascript\nObject.forIn = function(obj){\n\tvar Result = [];\n\tfor(var n in obj) Result.push(n);\n\treturn Result;\n}\n```\n\nforIn()得到的总是该对象全部可见的属性列表。而keys()将是其中的一个子集，即<font color=red>\"自有的(不包括继承而来的)\"可见属性列表。</font>下面的例子将显示二者的不同：\n\n``` javascript\nvar obj1 = {n1:100};\nvar obj2 = Object.create(obj1,{n2 : {value :200,enumerable:true}});\n\n//显示'n1' , 'n2'\n//  - 其中n1继承自obj1\nalert(Object.forIn(obj2));\n\n//显示'n2'\nalert(Object.keys(obj2));\n```\ngetOwnPropertyNames()得到的与上述两种情况都不相同。它列举全部自有的属性，但无论它是否可见。也就是说，<font color=red>它是keys()所列举内容的超集，包括全部可见和不可见的、自有的属性。</font>仍以上述为例：\n\n``` javascript\n// (续上例)\n\n//定义属性名n3,其enumerable性质默认为false\nObject.defineProperty(obj2,'n3',{value:300})\n\n//仍然显示'n1','n2'\n// - 新定义的n3不可见\nalert(Object.forIn(obj2));\n\n//显示'n2'\nalert(Object.keys(obj2));\n\n//显示n2,n3\nalert(Object.getOwnPropertyNames(obj2));\n\n```\n## 使用defineProperty来维护属性的性质\n在defineProperty()或defineProperties()中操作某个属性时，如果该名字的属性未声明则新建它；如果已经存在，则使用描述符中的新的性质来覆盖旧的性质值。\n\n这也意味着一个使用\"数据属性描述符\"的属性，也可以重新使用\"存取属性描述符\"——但总的来说只能存在其中一个。例如：\n\n``` javascript\nvar pOld,pNew;\nvar obj = { data : 'oldValue'}\n\n//显示'value,writable,enumerable,configuable'\npOld = Object.getOwnPropertyDescriptor(obj,'data');\nalert(Object.keys(pOld));\n\n//步骤一：通过一个闭包来保存旧的obj.data的值\nObject.defineProperty(obj,'data',function(oldValue){\n\treturn {\n\t\tget:function(){ return oldValue},\n\t\tconfigurable:false\n\t}\n}(obj.data))\n\n//显示'get,set,enumerable,configurable'\npNew = Object.getOwnPropertyDescriptor(obj,'data');\nalert(pNew);\n\n//步骤二：测试使用重定义的getter来取obj.data的值\n// - 显示 'oldValue'\nalert(obj.data);\n\n//步骤三：（测试）尝试再次声明data属性\n// - 由于在步骤一中已经设置configurable为false，因此导致异常(can't redefine)。\nObject.defineProperty(obj,'data',{value:100});\n```\n## 对于继承自原型的属性，修改其值的效果\n\n如果某个从原型继承来的属性是可写的，并且它使用的是\"数据属性描述符\"，那么在子类中修改该值，将隐式地创建一个属性描述符。这个新属性描述符将按照\"向对象添加一个属性\"的规格来初始化。即：必然是数据属性描述符，且Writable,Enumerable和Configurable均为true值。例如：\n\n``` javascript\nvar obj1 = {n1 : 100};\nvar obj2 = Object.create(obj1);\n\n//显示为空\n// - 重置n1的enumerable性质为false，因此在obj1中是不可见的\nObject.defineProperty(obj1,'n1',{enumerable:false})\nalert(Object.keys(obj1));\n\n//显示为空\n// - n1不是obj2的自有属性\nalert(Object.getOwnPropertyNames(obj2));\n\n//显示n1\n// - 由于n1赋值导致新的属性描述符，因此n1成为了自有的属性\nobj2.n1 = 'newValue';\nalert(Object.getOwnPropertyNames(obj2));\n\n//显示n1,表明n1是可见的\n// - 由于新的属性描述符的enumerable重置为true，因此在obj2中它是可见的\nalert(Object.keys(obj2));\n```\n如果一个属性使用的是\"存取属性描述符\",那么无论它的读写性为何，都不会新建属性描述符。对子类中该属性的读写，都只会忠诚地调用（继承而来的、原型中的）读写器。\n\n## 重写原型继承来的属性的描述符\n使用defineProperty()或defineProperties()将重新定义该属性，会显式的创建一个属性描述符。在这种情况下，该属性也将变成自雷对象中\"自有的\"属性，它的可见性等性质就由新的描述符来决定。\n\n与上一小节不同的是，这与原型中该属性是否\"只读\"或是否允许修改性质(configurable)无关。\n\n这可能导致类似如下的情况：在父类中某个属性时只读的，并且不可修改其描述符性质的，但是在子类中，同一个名字的属性却可以读写并可以重新修改性质。更为严重的是，仅仅观察两个对象实例的外观，我们无法识别这种差异是如何导致的。下面的示例说明这种情况：\n\n``` javascript\nvar obj1 = {n1 : 100};\nvar obj2 = Object.create(obj1);\n\n//对于原型对象obj1,修改其属性n1的性质，使其不可列举、修改、且不能重设性质\nObject.defineProperty(obj1,'n1',{writable:false,enumerable:false,configurable:false});\n\n//显示为空,obj1.n1是不可列举的\nalert(Object.keys(obj1));\n\n//由于不可重设性质，因此对obj1.n1的下述调用将导致异常\n//Object.defineProperty(obj1,'n1',{configurable:true});\n```\n接下来我们观察\"重新定义属性\"带来的效果：\n\n``` javascript\n//(续上例)\n\n//重新定义obj2.n1\nObject.defineProperty(obj2,'n1',{value:obj2.n1,writable:true,enumerable:true,configurable:true});\n\n//显示newValue'\n// - 结论:可以通过重定义属性，使该属性从\"只读\"变成\"可读写\"（以及其他性质的变化）\nobj2.n1 = 'newValue';\nalert(obj2.n1);\n\n//列举obj2的自有性质，结果显示：n1\n// - 现在n1是自有的属性了\nalert(Object.getOwnpropertyNames(obj2));\n```\n从表面上看，一个父类中只读的属性在子类变成了可读写。而且，一旦我们用delete删除该属性，它又会恢复父类中的值和性质。例如：\n\n``` javascript\n//尝试删除该属性\n// - 显示100，即它在原型中的值\ndelete obj2.n1;\nalert(obj2.n1);\n```\n再次强调这一事实：<font color=red>在ES5中没有任何方法可以阻止上述过程。也就是说，我们无法阻止子类对父类同名属性的重定义，也无法避免这种重定义可能带来的业务逻辑问题。</font>\n","slug":"JS-obj-creation-maintenance-analysis","published":1,"date":"2016-09-07T02:07:43.000Z","updated":"2017-04-08T09:01:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj272b9fk0000zsyfuuqln0oz","content":"<p>在说属性之前，我们先来了解一下ES5的新方法,Object.create()函数。</p>\n<h1 id=\"新的对象创建方法\"><a href=\"#新的对象创建方法\" class=\"headerlink\" title=\"新的对象创建方法\"></a>新的对象创建方法</h1><p>在旧的“原型继承”观念中，它的本质上是“复制原型”，即：以原型为模板复制一个新的对象。然而我们应该注意到一点事实：在这个思路上，“构造器函数”本身是无意义的。更确切的说，构造器函数对实例的修饰作用可有可无，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在构造器中修饰对象实例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.yyy = ...;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当意识到这一点后，ES5实现Object.cerate()这样一种简单的方法，通过这一方法将“构造器函数”从对象创建过程中赶了出去。在新的机制中，对象变成了简单的“原型继承+属性定义”，而不再需要“构造器”这样一层语义，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新的对象创建方法</span></div><div class=\"line\">newObj = <span class=\"built_in\">Object</span>.create(prototypeObj,PropertyDescriptors);</div></pre></td></tr></table></figure>\n<p>这里的PropertyDescriptors是一组属性描述符，用于声明基于prototypeObj这个原型之上的一些新的属性添加或修改，它与defineProperties()方法中的props参数是一样的，并在事实上也将调用后者。它的用法如下例所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aPrototypeObject = &#123;<span class=\"attr\">name1</span>:<span class=\"string\">\"value1\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> aNewInstance = <span class=\"built_in\">Object</span>.create(aPrototypeObject,&#123;</div><div class=\"line\">\t<span class=\"attr\">name2</span>:&#123;<span class=\"attr\">value</span>:<span class=\"string\">'value2'</span>&#125;,</div><div class=\"line\">\t<span class=\"attr\">name3</span>:&#123;<span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'value3'</span> &#125;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>很显然，在这种新方案中我们看不到类似MyObject()那样的构造器了。事实上在引擎实现Object.create()时也并不特别地声明某个构造器。</p>\n<p><strong><font color=\"red\">所以，所有由Object.create()创建的对象实例具有各自不同的原型（这取决于调用create()方法时传入的参数）,但它们的constractor值指向相同的引用——引擎内建的Object构造器。</font></strong></p>\n<h1 id=\"属性状态维护\"><a href=\"#属性状态维护\" class=\"headerlink\" title=\"属性状态维护\"></a>属性状态维护</h1><p>ES5中在Object()上声明了三组方法，用于维护对象本身在属性方面的信息，如下表（Markdown不会使用分组列表，大家凑合看看。。如果有知道的也告诉我一下哈~）</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th style=\"text-align:center\">方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>取属性列表</td>\n<td style=\"text-align:center\">getOwnPropertyNames(obj)</td>\n<td>取对象自有的属性名数组</td>\n</tr>\n<tr>\n<td>取属性列表</td>\n<td style=\"text-align:center\">keys(obj)</td>\n<td>取对象自由的、可见的属性名数组</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">preventExtensions(obj)</td>\n<td>使实例obj不能添加新属性</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">seal(obj)</td>\n<td>使实例obj不能添加新属性，也不能删除既有属性</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">freeze(obj)</td>\n<td>使实例obj所有属性只读，且不能再添加、删除属性</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isExtensible(obj)</td>\n<td>返回preventExtensions状态</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isSealed(obj)</td>\n<td>返回seal状态</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isFrozen(obj)</td>\n<td>返回freeze状态</td>\n</tr>\n</tbody>\n</table>\n<p>其中，preventExtensions、seal和freeze三种状态都是针对对象来操作的，会影响到所有属性的性质的设置。需要强调的有两点：</p>\n<ul>\n<li>由原型继承来的性质同样会受到影响</li>\n<li>以当前对象作为原型时，子类可以通过重新定义同名属性来覆盖这些状态</li>\n</ul>\n<p>更进一步的说，这三种状态是无法影响子类使用defineProperty()和defineProperties()来“重新定义（覆盖）”同名属性的。</p>\n<p>本质上说，delete运算是用于删除运算对象属性的属性描述符，而非某个属性。</p>\n<h2 id=\"取属性列表\"><a href=\"#取属性列表\" class=\"headerlink\" title=\"取属性列表\"></a>取属性列表</h2><p>取属性列表的传统方法是使用for…in语句。为方便后续讨论，我们先为该语句封装一个与Object.keys()类似的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.forIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> Result = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> obj) Result.push(n);</div><div class=\"line\">\t<span class=\"keyword\">return</span> Result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>forIn()得到的总是该对象全部可见的属性列表。而keys()将是其中的一个子集，即<font color=\"red\">“自有的(不包括继承而来的)”可见属性列表。</font>下面的例子将显示二者的不同：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span>:<span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1,&#123;<span class=\"attr\">n2</span> : &#123;<span class=\"attr\">value</span> :<span class=\"number\">200</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n1' , 'n2'</span></div><div class=\"line\"><span class=\"comment\">//  - 其中n1继承自obj1</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.forIn(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n2'</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div></pre></td></tr></table></figure>\n<p>getOwnPropertyNames()得到的与上述两种情况都不相同。它列举全部自有的属性，但无论它是否可见。也就是说，<font color=\"red\">它是keys()所列举内容的超集，包括全部可见和不可见的、自有的属性。</font>仍以上述为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// (续上例)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义属性名n3,其enumerable性质默认为false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2,<span class=\"string\">'n3'</span>,&#123;<span class=\"attr\">value</span>:<span class=\"number\">300</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//仍然显示'n1','n2'</span></div><div class=\"line\"><span class=\"comment\">// - 新定义的n3不可见</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.forIn(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n2'</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n2,n3</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div></pre></td></tr></table></figure>\n<h2 id=\"使用defineProperty来维护属性的性质\"><a href=\"#使用defineProperty来维护属性的性质\" class=\"headerlink\" title=\"使用defineProperty来维护属性的性质\"></a>使用defineProperty来维护属性的性质</h2><p>在defineProperty()或defineProperties()中操作某个属性时，如果该名字的属性未声明则新建它；如果已经存在，则使用描述符中的新的性质来覆盖旧的性质值。</p>\n<p>这也意味着一个使用”数据属性描述符”的属性，也可以重新使用”存取属性描述符”——但总的来说只能存在其中一个。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pOld,pNew;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">data</span> : <span class=\"string\">'oldValue'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'value,writable,enumerable,configuable'</span></div><div class=\"line\">pOld = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj,<span class=\"string\">'data'</span>);</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(pOld));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤一：通过一个闭包来保存旧的obj.data的值</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldValue</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> oldValue&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">configurable</span>:<span class=\"literal\">false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;(obj.data))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'get,set,enumerable,configurable'</span></div><div class=\"line\">pNew = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj,<span class=\"string\">'data'</span>);</div><div class=\"line\">alert(pNew);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤二：测试使用重定义的getter来取obj.data的值</span></div><div class=\"line\"><span class=\"comment\">// - 显示 'oldValue'</span></div><div class=\"line\">alert(obj.data);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤三：（测试）尝试再次声明data属性</span></div><div class=\"line\"><span class=\"comment\">// - 由于在步骤一中已经设置configurable为false，因此导致异常(can't redefine)。</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'data'</span>,&#123;<span class=\"attr\">value</span>:<span class=\"number\">100</span>&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"对于继承自原型的属性，修改其值的效果\"><a href=\"#对于继承自原型的属性，修改其值的效果\" class=\"headerlink\" title=\"对于继承自原型的属性，修改其值的效果\"></a>对于继承自原型的属性，修改其值的效果</h2><p>如果某个从原型继承来的属性是可写的，并且它使用的是”数据属性描述符”，那么在子类中修改该值，将隐式地创建一个属性描述符。这个新属性描述符将按照”向对象添加一个属性”的规格来初始化。即：必然是数据属性描述符，且Writable,Enumerable和Configurable均为true值。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span> : <span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空</span></div><div class=\"line\"><span class=\"comment\">// - 重置n1的enumerable性质为false，因此在obj1中是不可见的</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj1,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj1));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空</span></div><div class=\"line\"><span class=\"comment\">// - n1不是obj2的自有属性</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n1</span></div><div class=\"line\"><span class=\"comment\">// - 由于n1赋值导致新的属性描述符，因此n1成为了自有的属性</span></div><div class=\"line\">obj2.n1 = <span class=\"string\">'newValue'</span>;</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n1,表明n1是可见的</span></div><div class=\"line\"><span class=\"comment\">// - 由于新的属性描述符的enumerable重置为true，因此在obj2中它是可见的</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div></pre></td></tr></table></figure>\n<p>如果一个属性使用的是”存取属性描述符”,那么无论它的读写性为何，都不会新建属性描述符。对子类中该属性的读写，都只会忠诚地调用（继承而来的、原型中的）读写器。</p>\n<h2 id=\"重写原型继承来的属性的描述符\"><a href=\"#重写原型继承来的属性的描述符\" class=\"headerlink\" title=\"重写原型继承来的属性的描述符\"></a>重写原型继承来的属性的描述符</h2><p>使用defineProperty()或defineProperties()将重新定义该属性，会显式的创建一个属性描述符。在这种情况下，该属性也将变成自雷对象中”自有的”属性，它的可见性等性质就由新的描述符来决定。</p>\n<p>与上一小节不同的是，这与原型中该属性是否”只读”或是否允许修改性质(configurable)无关。</p>\n<p>这可能导致类似如下的情况：在父类中某个属性时只读的，并且不可修改其描述符性质的，但是在子类中，同一个名字的属性却可以读写并可以重新修改性质。更为严重的是，仅仅观察两个对象实例的外观，我们无法识别这种差异是如何导致的。下面的示例说明这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span> : <span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对于原型对象obj1,修改其属性n1的性质，使其不可列举、修改、且不能重设性质</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj1,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,<span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空,obj1.n1是不可列举的</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj1));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//由于不可重设性质，因此对obj1.n1的下述调用将导致异常</span></div><div class=\"line\"><span class=\"comment\">//Object.defineProperty(obj1,'n1',&#123;configurable:true&#125;);</span></div></pre></td></tr></table></figure>\n<p>接下来我们观察”重新定义属性”带来的效果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//(续上例)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//重新定义obj2.n1</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">value</span>:obj2.n1,<span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>,<span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示newValue'</span></div><div class=\"line\"><span class=\"comment\">// - 结论:可以通过重定义属性，使该属性从\"只读\"变成\"可读写\"（以及其他性质的变化）</span></div><div class=\"line\">obj2.n1 = <span class=\"string\">'newValue'</span>;</div><div class=\"line\">alert(obj2.n1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//列举obj2的自有性质，结果显示：n1</span></div><div class=\"line\"><span class=\"comment\">// - 现在n1是自有的属性了</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnpropertyNames(obj2));</div></pre></td></tr></table></figure>\n<p>从表面上看，一个父类中只读的属性在子类变成了可读写。而且，一旦我们用delete删除该属性，它又会恢复父类中的值和性质。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//尝试删除该属性</span></div><div class=\"line\"><span class=\"comment\">// - 显示100，即它在原型中的值</span></div><div class=\"line\"><span class=\"keyword\">delete</span> obj2.n1;</div><div class=\"line\">alert(obj2.n1);</div></pre></td></tr></table></figure>\n<p>再次强调这一事实：<font color=\"red\">在ES5中没有任何方法可以阻止上述过程。也就是说，我们无法阻止子类对父类同名属性的重定义，也无法避免这种重定义可能带来的业务逻辑问题。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在说属性之前，我们先来了解一下ES5的新方法,Object.create()函数。</p>\n<h1 id=\"新的对象创建方法\"><a href=\"#新的对象创建方法\" class=\"headerlink\" title=\"新的对象创建方法\"></a>新的对象创建方法</h1><p>在旧的“原型继承”观念中，它的本质上是“复制原型”，即：以原型为模板复制一个新的对象。然而我们应该注意到一点事实：在这个思路上，“构造器函数”本身是无意义的。更确切的说，构造器函数对实例的修饰作用可有可无，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在构造器中修饰对象实例</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.yyy = ...;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当意识到这一点后，ES5实现Object.cerate()这样一种简单的方法，通过这一方法将“构造器函数”从对象创建过程中赶了出去。在新的机制中，对象变成了简单的“原型继承+属性定义”，而不再需要“构造器”这样一层语义，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新的对象创建方法</span></div><div class=\"line\">newObj = <span class=\"built_in\">Object</span>.create(prototypeObj,PropertyDescriptors);</div></pre></td></tr></table></figure>\n<p>这里的PropertyDescriptors是一组属性描述符，用于声明基于prototypeObj这个原型之上的一些新的属性添加或修改，它与defineProperties()方法中的props参数是一样的，并在事实上也将调用后者。它的用法如下例所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aPrototypeObject = &#123;<span class=\"attr\">name1</span>:<span class=\"string\">\"value1\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> aNewInstance = <span class=\"built_in\">Object</span>.create(aPrototypeObject,&#123;</div><div class=\"line\">\t<span class=\"attr\">name2</span>:&#123;<span class=\"attr\">value</span>:<span class=\"string\">'value2'</span>&#125;,</div><div class=\"line\">\t<span class=\"attr\">name3</span>:&#123;<span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'value3'</span> &#125;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>很显然，在这种新方案中我们看不到类似MyObject()那样的构造器了。事实上在引擎实现Object.create()时也并不特别地声明某个构造器。</p>\n<p><strong><font color=\"red\">所以，所有由Object.create()创建的对象实例具有各自不同的原型（这取决于调用create()方法时传入的参数）,但它们的constractor值指向相同的引用——引擎内建的Object构造器。</font></strong></p>\n<h1 id=\"属性状态维护\"><a href=\"#属性状态维护\" class=\"headerlink\" title=\"属性状态维护\"></a>属性状态维护</h1><p>ES5中在Object()上声明了三组方法，用于维护对象本身在属性方面的信息，如下表（Markdown不会使用分组列表，大家凑合看看。。如果有知道的也告诉我一下哈~）</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th style=\"text-align:center\">方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>取属性列表</td>\n<td style=\"text-align:center\">getOwnPropertyNames(obj)</td>\n<td>取对象自有的属性名数组</td>\n</tr>\n<tr>\n<td>取属性列表</td>\n<td style=\"text-align:center\">keys(obj)</td>\n<td>取对象自由的、可见的属性名数组</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">preventExtensions(obj)</td>\n<td>使实例obj不能添加新属性</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">seal(obj)</td>\n<td>使实例obj不能添加新属性，也不能删除既有属性</td>\n</tr>\n<tr>\n<td>状态维护</td>\n<td style=\"text-align:center\">freeze(obj)</td>\n<td>使实例obj所有属性只读，且不能再添加、删除属性</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isExtensible(obj)</td>\n<td>返回preventExtensions状态</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isSealed(obj)</td>\n<td>返回seal状态</td>\n</tr>\n<tr>\n<td>状态检查</td>\n<td style=\"text-align:center\">isFrozen(obj)</td>\n<td>返回freeze状态</td>\n</tr>\n</tbody>\n</table>\n<p>其中，preventExtensions、seal和freeze三种状态都是针对对象来操作的，会影响到所有属性的性质的设置。需要强调的有两点：</p>\n<ul>\n<li>由原型继承来的性质同样会受到影响</li>\n<li>以当前对象作为原型时，子类可以通过重新定义同名属性来覆盖这些状态</li>\n</ul>\n<p>更进一步的说，这三种状态是无法影响子类使用defineProperty()和defineProperties()来“重新定义（覆盖）”同名属性的。</p>\n<p>本质上说，delete运算是用于删除运算对象属性的属性描述符，而非某个属性。</p>\n<h2 id=\"取属性列表\"><a href=\"#取属性列表\" class=\"headerlink\" title=\"取属性列表\"></a>取属性列表</h2><p>取属性列表的传统方法是使用for…in语句。为方便后续讨论，我们先为该语句封装一个与Object.keys()类似的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.forIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> Result = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> obj) Result.push(n);</div><div class=\"line\">\t<span class=\"keyword\">return</span> Result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>forIn()得到的总是该对象全部可见的属性列表。而keys()将是其中的一个子集，即<font color=\"red\">“自有的(不包括继承而来的)”可见属性列表。</font>下面的例子将显示二者的不同：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span>:<span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1,&#123;<span class=\"attr\">n2</span> : &#123;<span class=\"attr\">value</span> :<span class=\"number\">200</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>&#125;&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n1' , 'n2'</span></div><div class=\"line\"><span class=\"comment\">//  - 其中n1继承自obj1</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.forIn(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n2'</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div></pre></td></tr></table></figure>\n<p>getOwnPropertyNames()得到的与上述两种情况都不相同。它列举全部自有的属性，但无论它是否可见。也就是说，<font color=\"red\">它是keys()所列举内容的超集，包括全部可见和不可见的、自有的属性。</font>仍以上述为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// (续上例)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义属性名n3,其enumerable性质默认为false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2,<span class=\"string\">'n3'</span>,&#123;<span class=\"attr\">value</span>:<span class=\"number\">300</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//仍然显示'n1','n2'</span></div><div class=\"line\"><span class=\"comment\">// - 新定义的n3不可见</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.forIn(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'n2'</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n2,n3</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div></pre></td></tr></table></figure>\n<h2 id=\"使用defineProperty来维护属性的性质\"><a href=\"#使用defineProperty来维护属性的性质\" class=\"headerlink\" title=\"使用defineProperty来维护属性的性质\"></a>使用defineProperty来维护属性的性质</h2><p>在defineProperty()或defineProperties()中操作某个属性时，如果该名字的属性未声明则新建它；如果已经存在，则使用描述符中的新的性质来覆盖旧的性质值。</p>\n<p>这也意味着一个使用”数据属性描述符”的属性，也可以重新使用”存取属性描述符”——但总的来说只能存在其中一个。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pOld,pNew;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">data</span> : <span class=\"string\">'oldValue'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'value,writable,enumerable,configuable'</span></div><div class=\"line\">pOld = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj,<span class=\"string\">'data'</span>);</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(pOld));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤一：通过一个闭包来保存旧的obj.data的值</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldValue</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> oldValue&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">configurable</span>:<span class=\"literal\">false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;(obj.data))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示'get,set,enumerable,configurable'</span></div><div class=\"line\">pNew = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj,<span class=\"string\">'data'</span>);</div><div class=\"line\">alert(pNew);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤二：测试使用重定义的getter来取obj.data的值</span></div><div class=\"line\"><span class=\"comment\">// - 显示 'oldValue'</span></div><div class=\"line\">alert(obj.data);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//步骤三：（测试）尝试再次声明data属性</span></div><div class=\"line\"><span class=\"comment\">// - 由于在步骤一中已经设置configurable为false，因此导致异常(can't redefine)。</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'data'</span>,&#123;<span class=\"attr\">value</span>:<span class=\"number\">100</span>&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"对于继承自原型的属性，修改其值的效果\"><a href=\"#对于继承自原型的属性，修改其值的效果\" class=\"headerlink\" title=\"对于继承自原型的属性，修改其值的效果\"></a>对于继承自原型的属性，修改其值的效果</h2><p>如果某个从原型继承来的属性是可写的，并且它使用的是”数据属性描述符”，那么在子类中修改该值，将隐式地创建一个属性描述符。这个新属性描述符将按照”向对象添加一个属性”的规格来初始化。即：必然是数据属性描述符，且Writable,Enumerable和Configurable均为true值。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span> : <span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空</span></div><div class=\"line\"><span class=\"comment\">// - 重置n1的enumerable性质为false，因此在obj1中是不可见的</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj1,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>&#125;)</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj1));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空</span></div><div class=\"line\"><span class=\"comment\">// - n1不是obj2的自有属性</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n1</span></div><div class=\"line\"><span class=\"comment\">// - 由于n1赋值导致新的属性描述符，因此n1成为了自有的属性</span></div><div class=\"line\">obj2.n1 = <span class=\"string\">'newValue'</span>;</div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj2));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示n1,表明n1是可见的</span></div><div class=\"line\"><span class=\"comment\">// - 由于新的属性描述符的enumerable重置为true，因此在obj2中它是可见的</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj2));</div></pre></td></tr></table></figure>\n<p>如果一个属性使用的是”存取属性描述符”,那么无论它的读写性为何，都不会新建属性描述符。对子类中该属性的读写，都只会忠诚地调用（继承而来的、原型中的）读写器。</p>\n<h2 id=\"重写原型继承来的属性的描述符\"><a href=\"#重写原型继承来的属性的描述符\" class=\"headerlink\" title=\"重写原型继承来的属性的描述符\"></a>重写原型继承来的属性的描述符</h2><p>使用defineProperty()或defineProperties()将重新定义该属性，会显式的创建一个属性描述符。在这种情况下，该属性也将变成自雷对象中”自有的”属性，它的可见性等性质就由新的描述符来决定。</p>\n<p>与上一小节不同的是，这与原型中该属性是否”只读”或是否允许修改性质(configurable)无关。</p>\n<p>这可能导致类似如下的情况：在父类中某个属性时只读的，并且不可修改其描述符性质的，但是在子类中，同一个名字的属性却可以读写并可以重新修改性质。更为严重的是，仅仅观察两个对象实例的外观，我们无法识别这种差异是如何导致的。下面的示例说明这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">n1</span> : <span class=\"number\">100</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对于原型对象obj1,修改其属性n1的性质，使其不可列举、修改、且不能重设性质</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj1,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,<span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示为空,obj1.n1是不可列举的</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.keys(obj1));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//由于不可重设性质，因此对obj1.n1的下述调用将导致异常</span></div><div class=\"line\"><span class=\"comment\">//Object.defineProperty(obj1,'n1',&#123;configurable:true&#125;);</span></div></pre></td></tr></table></figure>\n<p>接下来我们观察”重新定义属性”带来的效果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//(续上例)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//重新定义obj2.n1</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj2,<span class=\"string\">'n1'</span>,&#123;<span class=\"attr\">value</span>:obj2.n1,<span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,<span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>,<span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示newValue'</span></div><div class=\"line\"><span class=\"comment\">// - 结论:可以通过重定义属性，使该属性从\"只读\"变成\"可读写\"（以及其他性质的变化）</span></div><div class=\"line\">obj2.n1 = <span class=\"string\">'newValue'</span>;</div><div class=\"line\">alert(obj2.n1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//列举obj2的自有性质，结果显示：n1</span></div><div class=\"line\"><span class=\"comment\">// - 现在n1是自有的属性了</span></div><div class=\"line\">alert(<span class=\"built_in\">Object</span>.getOwnpropertyNames(obj2));</div></pre></td></tr></table></figure>\n<p>从表面上看，一个父类中只读的属性在子类变成了可读写。而且，一旦我们用delete删除该属性，它又会恢复父类中的值和性质。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//尝试删除该属性</span></div><div class=\"line\"><span class=\"comment\">// - 显示100，即它在原型中的值</span></div><div class=\"line\"><span class=\"keyword\">delete</span> obj2.n1;</div><div class=\"line\">alert(obj2.n1);</div></pre></td></tr></table></figure>\n<p>再次强调这一事实：<font color=\"red\">在ES5中没有任何方法可以阻止上述过程。也就是说，我们无法阻止子类对父类同名属性的重定义，也无法避免这种重定义可能带来的业务逻辑问题。</font></p>\n"},{"title":"JS中的This别再被问倒了，面试常见问题分析","date":"2017-05-02T04:21:31.000Z","_content":"\nGitHub地址：https://github.com/SimonZhangITer/MyBlog/issues/12\n\n> this的指向问题应该是让每一个前端er都头疼的问题，我也一样，曾经遇到甚至都是一顿乱猜。最近在研读一些书籍如《你不知道的JavaScript》和《JavaScript语言精粹与编程实践》，让我对this的问题豁然开朗。故写下此篇文章，分享一下我的心得。\n\n# 隐式绑定\n关于this，一般来说，谁调用了方法，该方法的this就指向谁，如：\n\n```javascript\nfunction foo(){\n\tconsole.log(this.a)\n}\n\nvar a = 3;\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n};\n\nobj.foo(); // 输出2,因为是obj调用的foo，所以foo的this指向了obj，而obj.a = 2\n```\n\n如果存在多次调用，`对象属性引用链只有上一层或者说最后一层在调用位置中起作用`，如：\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nvar obj2 = {\n    a: 42,\n    foo: foo\n}\n\nvar obj1 = {\n    a: 2,\n    obj2: obj2\n}\n\nobj1.obj2.foo(); // 42\n```\n## 隐式丢失\n一个最常见的this绑定问题就是被`隐式绑定`的函数会丢失绑定对象，也就是说他回应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n}\n\nvar bar = obj1.foo; // 函数别名！\n\nvar a = \"oops, global\"; // a是全局对象的属性\n\nbar(); // \"oops, global\"\n```\n`虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定`\n\n一个更微妙、更常见并且更出乎意料的情况发生在`传入回调函数时`：\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nfunction doFoo( fn ){\n    // fn 其实引用的是 foo\n    fn(); // <-- 调用位置！\n}\n\nvar obj = {\n    a: 2,\n    foo: foo\n}\n\nvar a = \"oops, global\"; // a是全局对象的属性\n\ndoFoo( obj.foo ); // \"oops, global\"\n```\n`参数传递其实就是一种隐式赋值`，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样，如果把函数传入语言内置的函数而不是传入自己声明的函数（如setTimeout等），`结果也是一样的`\n\n# 显式绑定\n简单的说，就是指定this，如：call、apply、bind、new绑定等\n\n## 硬绑定\n```javascript\nfunction foo( something ) {\n    console.log( this.a, something)\n    return this.a + something\n}\n\nvar obj = {\n    a: 2\n}\n\nvar bar = function() {\n    return foo.apply( obj, arguments)\n}\n\nvar b = bar(3); // 2 3\nconsole.log(b); // 5\n```\n这里简单做一下解释：\n在bar函数中，foo使用apply函数绑定了obj，也就是说foo中的this将指向obj，与此同时，使用arguments（不限制传入参数的数量）作为参数传入foo函数中；所以在运行bar(3)的时候，首先输出obj.a也就是2和传入的3，然后foo返回了两者的相加值，所以b的值为5\n\n同样，本例也可以使用`bind`:\n\n```javascript\nfunction foo( something ) {\n    console.log( this.a, something)\n    return this.a + something\n}\n\nvar obj = {\n    a: 2\n}\n\nvar bar = foo.bind(obj)\n\nvar b = bar(3); // 2 3\nconsole.log(b); // 5\n```\n## new绑定\n在传统面向类的语言中，使用new初始化类的时候会调用类中的构造函数，但是JS中new的机制实际上和面向类和语言完全不同。\n\n使用`new`来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：\n\n- 创建（或者说构造）一个全新的对象\n- 这个新对象会被执行[[Prototype]]连接\n- 这个新对象会绑定到函数调用的this\n- 如果函数没有返回其他对象，那么new表达式中的函数会自动返回这个新对象\n如：\n\n```javascript\nfunction foo(a){\n    this.a = a\n}\n\nvar bar = new foo(2);\nconsole.log(bar.a); // 2\n```\n\n使用new来调用foo(...)时，我们会构造一个新对象并把它绑定到foo(...)调用中的this上。new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。\n\n# this的优先级\n毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。\n\n隐式绑定和显式绑定哪个优先级更高？我们来测试一下：\n\n```javascript\nfunction foo(a){\n    console.log(this.a)\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n}\n\nvar obj2 = {\n    a: 3,\n    foo: foo\n}\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call(obj2); // 3\nobj2.foo.call(obj1); // 2\n```\n可以看到，`显式绑定`优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。\n\n现在我们要搞清楚`new绑定`和`隐式绑定`的优先级谁高谁低 ：\n\n```javascript\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {\n    foo: foo\n}\n\nvar obj2 = {}\n\nobj1.foo(2);\nconsole.log(obj1.a); // 2\n\nobj1.foo.call(obj2,3);\nconsole.log(obj2.a); // 3\n\nvar bar = new obj1.foo(4)\nconsole.log(obj1.a); // 2\nconsole.log(bar.a); // 4\n```\n可以看到`new绑定`比`隐式绑定`优先级高。但是`new绑定`和`显式绑定`谁的优先级更高呢？\n\n```javascript\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {}\n\nvar bar = foo.bind(obj1);\nbar(2);\nconsole.log(obj1.a); // 2\n\nvar baz = new bar(3);\nconsole.log(obj1.a); // 2\nconsole.log(baz.a); // 3\n```\n可以看到，`new绑定`修改了`硬绑定`中的this，所以`new绑定`的优先级比`显式绑定`更高。\n\n之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行初始化时就可以只传入其余的参数。bind(...)的功能之一就是可以把除了第一个参数（第一个参数用于绑定this）之外的其他参数都传给下层的函数（这种技术称为“部分应用”，是“`柯里化`”的一种）。举例来说：\n\n```javascript\nfunction foo(p1,p2){\n    this.val = p1 + p2;\n}\n\n// 之所以使用null是因为在本例中我们并不关心硬绑定的this是什么\n// 反正使用new时this会被修改\nvar bar = foo.bind(null,'p1');\n\nvar baz = new bar('p2');\n\nbaz.val; // p1p2\n}\n```\n> 柯里化:在直觉上，柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。所以对于有两个变量的函数yx，如果固定了 y = 2，则得到有一个变量的函数 2x\n\n# This在箭头函数中的应用\n\n箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。\n\n我们来看一下箭头函数的词法作用域：\n\n```javascript\nfunction foo() {\n\t// 返回一个箭头函数\n\treturn (a) => {\n\t\t// this继承自foo()\n\t\tconsole.log(this.a)\n\t};\n}\n\nvar obj1 = {\n\ta: 2\n};\n\nvar obj2 = {\n\ta: 3\n};\n\nvar bar = foo.call(obj1);\nbar.call(obj2); // 2, 不是3！\n```\n\nfoo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行!）\n\n# 总结\n\n如果要判断一个运行中的函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。\n\n1. 由new调用？绑定到新创建的对象。\n2. 由call或者apply（或者bind）调用？绑定到指定的对象。\n3. 由上下文对象调用？绑定到那个上下文对象。\n4. 默认：在严格模式下绑定到undefined，否则绑定到全局对象。\n","source":"_posts/you-donot-konw-this.md","raw":"---\ntitle: JS中的This别再被问倒了，面试常见问题分析\ndate: 2017-05-02 12:21:31\ntags: [JavaScript,ES6]\ncategories: JavaScript\n---\n\nGitHub地址：https://github.com/SimonZhangITer/MyBlog/issues/12\n\n> this的指向问题应该是让每一个前端er都头疼的问题，我也一样，曾经遇到甚至都是一顿乱猜。最近在研读一些书籍如《你不知道的JavaScript》和《JavaScript语言精粹与编程实践》，让我对this的问题豁然开朗。故写下此篇文章，分享一下我的心得。\n\n# 隐式绑定\n关于this，一般来说，谁调用了方法，该方法的this就指向谁，如：\n\n```javascript\nfunction foo(){\n\tconsole.log(this.a)\n}\n\nvar a = 3;\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n};\n\nobj.foo(); // 输出2,因为是obj调用的foo，所以foo的this指向了obj，而obj.a = 2\n```\n\n如果存在多次调用，`对象属性引用链只有上一层或者说最后一层在调用位置中起作用`，如：\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nvar obj2 = {\n    a: 42,\n    foo: foo\n}\n\nvar obj1 = {\n    a: 2,\n    obj2: obj2\n}\n\nobj1.obj2.foo(); // 42\n```\n## 隐式丢失\n一个最常见的this绑定问题就是被`隐式绑定`的函数会丢失绑定对象，也就是说他回应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n}\n\nvar bar = obj1.foo; // 函数别名！\n\nvar a = \"oops, global\"; // a是全局对象的属性\n\nbar(); // \"oops, global\"\n```\n`虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定`\n\n一个更微妙、更常见并且更出乎意料的情况发生在`传入回调函数时`：\n\n```javascript\nfunction foo() {\n    console.log( this.a )\n}\n\nfunction doFoo( fn ){\n    // fn 其实引用的是 foo\n    fn(); // <-- 调用位置！\n}\n\nvar obj = {\n    a: 2,\n    foo: foo\n}\n\nvar a = \"oops, global\"; // a是全局对象的属性\n\ndoFoo( obj.foo ); // \"oops, global\"\n```\n`参数传递其实就是一种隐式赋值`，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样，如果把函数传入语言内置的函数而不是传入自己声明的函数（如setTimeout等），`结果也是一样的`\n\n# 显式绑定\n简单的说，就是指定this，如：call、apply、bind、new绑定等\n\n## 硬绑定\n```javascript\nfunction foo( something ) {\n    console.log( this.a, something)\n    return this.a + something\n}\n\nvar obj = {\n    a: 2\n}\n\nvar bar = function() {\n    return foo.apply( obj, arguments)\n}\n\nvar b = bar(3); // 2 3\nconsole.log(b); // 5\n```\n这里简单做一下解释：\n在bar函数中，foo使用apply函数绑定了obj，也就是说foo中的this将指向obj，与此同时，使用arguments（不限制传入参数的数量）作为参数传入foo函数中；所以在运行bar(3)的时候，首先输出obj.a也就是2和传入的3，然后foo返回了两者的相加值，所以b的值为5\n\n同样，本例也可以使用`bind`:\n\n```javascript\nfunction foo( something ) {\n    console.log( this.a, something)\n    return this.a + something\n}\n\nvar obj = {\n    a: 2\n}\n\nvar bar = foo.bind(obj)\n\nvar b = bar(3); // 2 3\nconsole.log(b); // 5\n```\n## new绑定\n在传统面向类的语言中，使用new初始化类的时候会调用类中的构造函数，但是JS中new的机制实际上和面向类和语言完全不同。\n\n使用`new`来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：\n\n- 创建（或者说构造）一个全新的对象\n- 这个新对象会被执行[[Prototype]]连接\n- 这个新对象会绑定到函数调用的this\n- 如果函数没有返回其他对象，那么new表达式中的函数会自动返回这个新对象\n如：\n\n```javascript\nfunction foo(a){\n    this.a = a\n}\n\nvar bar = new foo(2);\nconsole.log(bar.a); // 2\n```\n\n使用new来调用foo(...)时，我们会构造一个新对象并把它绑定到foo(...)调用中的this上。new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。\n\n# this的优先级\n毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。\n\n隐式绑定和显式绑定哪个优先级更高？我们来测试一下：\n\n```javascript\nfunction foo(a){\n    console.log(this.a)\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n}\n\nvar obj2 = {\n    a: 3,\n    foo: foo\n}\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call(obj2); // 3\nobj2.foo.call(obj1); // 2\n```\n可以看到，`显式绑定`优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。\n\n现在我们要搞清楚`new绑定`和`隐式绑定`的优先级谁高谁低 ：\n\n```javascript\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {\n    foo: foo\n}\n\nvar obj2 = {}\n\nobj1.foo(2);\nconsole.log(obj1.a); // 2\n\nobj1.foo.call(obj2,3);\nconsole.log(obj2.a); // 3\n\nvar bar = new obj1.foo(4)\nconsole.log(obj1.a); // 2\nconsole.log(bar.a); // 4\n```\n可以看到`new绑定`比`隐式绑定`优先级高。但是`new绑定`和`显式绑定`谁的优先级更高呢？\n\n```javascript\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {}\n\nvar bar = foo.bind(obj1);\nbar(2);\nconsole.log(obj1.a); // 2\n\nvar baz = new bar(3);\nconsole.log(obj1.a); // 2\nconsole.log(baz.a); // 3\n```\n可以看到，`new绑定`修改了`硬绑定`中的this，所以`new绑定`的优先级比`显式绑定`更高。\n\n之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行初始化时就可以只传入其余的参数。bind(...)的功能之一就是可以把除了第一个参数（第一个参数用于绑定this）之外的其他参数都传给下层的函数（这种技术称为“部分应用”，是“`柯里化`”的一种）。举例来说：\n\n```javascript\nfunction foo(p1,p2){\n    this.val = p1 + p2;\n}\n\n// 之所以使用null是因为在本例中我们并不关心硬绑定的this是什么\n// 反正使用new时this会被修改\nvar bar = foo.bind(null,'p1');\n\nvar baz = new bar('p2');\n\nbaz.val; // p1p2\n}\n```\n> 柯里化:在直觉上，柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。所以对于有两个变量的函数yx，如果固定了 y = 2，则得到有一个变量的函数 2x\n\n# This在箭头函数中的应用\n\n箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。\n\n我们来看一下箭头函数的词法作用域：\n\n```javascript\nfunction foo() {\n\t// 返回一个箭头函数\n\treturn (a) => {\n\t\t// this继承自foo()\n\t\tconsole.log(this.a)\n\t};\n}\n\nvar obj1 = {\n\ta: 2\n};\n\nvar obj2 = {\n\ta: 3\n};\n\nvar bar = foo.call(obj1);\nbar.call(obj2); // 2, 不是3！\n```\n\nfoo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行!）\n\n# 总结\n\n如果要判断一个运行中的函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。\n\n1. 由new调用？绑定到新创建的对象。\n2. 由call或者apply（或者bind）调用？绑定到指定的对象。\n3. 由上下文对象调用？绑定到那个上下文对象。\n4. 默认：在严格模式下绑定到undefined，否则绑定到全局对象。\n","slug":"you-donot-konw-this","published":1,"updated":"2017-05-02T04:26:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj272b9fo0001zsyfujzc0ali","content":"<p>GitHub地址：<a href=\"https://github.com/SimonZhangITer/MyBlog/issues/12\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/MyBlog/issues/12</a></p>\n<blockquote>\n<p>this的指向问题应该是让每一个前端er都头疼的问题，我也一样，曾经遇到甚至都是一顿乱猜。最近在研读一些书籍如《你不知道的JavaScript》和《JavaScript语言精粹与编程实践》，让我对this的问题豁然开朗。故写下此篇文章，分享一下我的心得。</p>\n</blockquote>\n<h1 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h1><p>关于this，一般来说，谁调用了方法，该方法的this就指向谁，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t<span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.foo(); <span class=\"comment\">// 输出2,因为是obj调用的foo，所以foo的this指向了obj，而obj.a = 2</span></div></pre></td></tr></table></figure>\n<p>如果存在多次调用，<code>对象属性引用链只有上一层或者说最后一层在调用位置中起作用</code>，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">42</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">obj2</span>: obj2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.obj2.foo(); <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure>\n<h2 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h2><p>一个最常见的this绑定问题就是被<code>隐式绑定</code>的函数会丢失绑定对象，也就是说他回应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = obj1.foo; <span class=\"comment\">// 函数别名！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"oops, global\"</span>; <span class=\"comment\">// a是全局对象的属性</span></div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// \"oops, global\"</span></div></pre></td></tr></table></figure>\n<p><code>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定</code></p>\n<p>一个更微妙、更常见并且更出乎意料的情况发生在<code>传入回调函数时</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doFoo</span>(<span class=\"params\"> fn </span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// fn 其实引用的是 foo</span></div><div class=\"line\">    fn(); <span class=\"comment\">// &lt;-- 调用位置！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"oops, global\"</span>; <span class=\"comment\">// a是全局对象的属性</span></div><div class=\"line\"></div><div class=\"line\">doFoo( obj.foo ); <span class=\"comment\">// \"oops, global\"</span></div></pre></td></tr></table></figure>\n<p><code>参数传递其实就是一种隐式赋值</code>，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样，如果把函数传入语言内置的函数而不是传入自己声明的函数（如setTimeout等），<code>结果也是一样的</code></p>\n<h1 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h1><p>简单的说，就是指定this，如：call、apply、bind、new绑定等</p>\n<h2 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> something </span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a, something)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo.apply( obj, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = bar(<span class=\"number\">3</span>); <span class=\"comment\">// 2 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>这里简单做一下解释：<br>在bar函数中，foo使用apply函数绑定了obj，也就是说foo中的this将指向obj，与此同时，使用arguments（不限制传入参数的数量）作为参数传入foo函数中；所以在运行bar(3)的时候，首先输出obj.a也就是2和传入的3，然后foo返回了两者的相加值，所以b的值为5</p>\n<p>同样，本例也可以使用<code>bind</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> something </span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a, something)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(obj)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = bar(<span class=\"number\">3</span>); <span class=\"comment\">// 2 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>在传统面向类的语言中，使用new初始化类的时候会调用类中的构造函数，但是JS中new的机制实际上和面向类和语言完全不同。</p>\n<p>使用<code>new</code>来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：</p>\n<ul>\n<li>创建（或者说构造）一个全新的对象</li>\n<li>这个新对象会被执行[[Prototype]]连接</li>\n<li>这个新对象会绑定到函数调用的this</li>\n<li>如果函数没有返回其他对象，那么new表达式中的函数会自动返回这个新对象<br>如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = a</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar.a); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>使用new来调用foo(…)时，我们会构造一个新对象并把它绑定到foo(…)调用中的this上。new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。</p>\n<h1 id=\"this的优先级\"><a href=\"#this的优先级\" class=\"headerlink\" title=\"this的优先级\"></a>this的优先级</h1><p>毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。</p>\n<p>隐式绑定和显式绑定哪个优先级更高？我们来测试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(); <span class=\"comment\">// 2</span></div><div class=\"line\">obj2.foo(); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">obj1.foo.call(obj2); <span class=\"comment\">// 3</span></div><div class=\"line\">obj2.foo.call(obj1); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>可以看到，<code>显式绑定</code>优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。</p>\n<p>现在我们要搞清楚<code>new绑定</code>和<code>隐式绑定</code>的优先级谁高谁低 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">obj1.foo.call(obj2,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> obj1.foo(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar.a); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n<p>可以看到<code>new绑定</code>比<code>隐式绑定</code>优先级高。但是<code>new绑定</code>和<code>显式绑定</code>谁的优先级更高呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(obj1);</div><div class=\"line\">bar(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> bar(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(baz.a); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>可以看到，<code>new绑定</code>修改了<code>硬绑定</code>中的this，所以<code>new绑定</code>的优先级比<code>显式绑定</code>更高。</p>\n<p>之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行初始化时就可以只传入其余的参数。bind(…)的功能之一就是可以把除了第一个参数（第一个参数用于绑定this）之外的其他参数都传给下层的函数（这种技术称为“部分应用”，是“<code>柯里化</code>”的一种）。举例来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1,p2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.val = p1 + p2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 之所以使用null是因为在本例中我们并不关心硬绑定的this是什么</span></div><div class=\"line\"><span class=\"comment\">// 反正使用new时this会被修改</span></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(<span class=\"literal\">null</span>,<span class=\"string\">'p1'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> bar(<span class=\"string\">'p2'</span>);</div><div class=\"line\"></div><div class=\"line\">baz.val; <span class=\"comment\">// p1p2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>柯里化:在直觉上，柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。所以对于有两个变量的函数yx，如果固定了 y = 2，则得到有一个变量的函数 2x</p>\n</blockquote>\n<h1 id=\"This在箭头函数中的应用\"><a href=\"#This在箭头函数中的应用\" class=\"headerlink\" title=\"This在箭头函数中的应用\"></a>This在箭头函数中的应用</h1><p>箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p>\n<p>我们来看一下箭头函数的词法作用域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 返回一个箭头函数</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// this继承自foo()</span></div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj1);</div><div class=\"line\">bar.call(obj2); <span class=\"comment\">// 2, 不是3！</span></div></pre></td></tr></table></figure>\n<p>foo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行!）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果要判断一个运行中的函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。</p>\n<ol>\n<li>由new调用？绑定到新创建的对象。</li>\n<li>由call或者apply（或者bind）调用？绑定到指定的对象。</li>\n<li>由上下文对象调用？绑定到那个上下文对象。</li>\n<li>默认：在严格模式下绑定到undefined，否则绑定到全局对象。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>GitHub地址：<a href=\"https://github.com/SimonZhangITer/MyBlog/issues/12\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/MyBlog/issues/12</a></p>\n<blockquote>\n<p>this的指向问题应该是让每一个前端er都头疼的问题，我也一样，曾经遇到甚至都是一顿乱猜。最近在研读一些书籍如《你不知道的JavaScript》和《JavaScript语言精粹与编程实践》，让我对this的问题豁然开朗。故写下此篇文章，分享一下我的心得。</p>\n</blockquote>\n<h1 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h1><p>关于this，一般来说，谁调用了方法，该方法的this就指向谁，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t<span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.foo(); <span class=\"comment\">// 输出2,因为是obj调用的foo，所以foo的this指向了obj，而obj.a = 2</span></div></pre></td></tr></table></figure>\n<p>如果存在多次调用，<code>对象属性引用链只有上一层或者说最后一层在调用位置中起作用</code>，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">42</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">obj2</span>: obj2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.obj2.foo(); <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure>\n<h2 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h2><p>一个最常见的this绑定问题就是被<code>隐式绑定</code>的函数会丢失绑定对象，也就是说他回应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = obj1.foo; <span class=\"comment\">// 函数别名！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"oops, global\"</span>; <span class=\"comment\">// a是全局对象的属性</span></div><div class=\"line\"></div><div class=\"line\">bar(); <span class=\"comment\">// \"oops, global\"</span></div></pre></td></tr></table></figure>\n<p><code>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定</code></p>\n<p>一个更微妙、更常见并且更出乎意料的情况发生在<code>传入回调函数时</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doFoo</span>(<span class=\"params\"> fn </span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// fn 其实引用的是 foo</span></div><div class=\"line\">    fn(); <span class=\"comment\">// &lt;-- 调用位置！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"oops, global\"</span>; <span class=\"comment\">// a是全局对象的属性</span></div><div class=\"line\"></div><div class=\"line\">doFoo( obj.foo ); <span class=\"comment\">// \"oops, global\"</span></div></pre></td></tr></table></figure>\n<p><code>参数传递其实就是一种隐式赋值</code>，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样，如果把函数传入语言内置的函数而不是传入自己声明的函数（如setTimeout等），<code>结果也是一样的</code></p>\n<h1 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h1><p>简单的说，就是指定this，如：call、apply、bind、new绑定等</p>\n<h2 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> something </span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a, something)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo.apply( obj, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = bar(<span class=\"number\">3</span>); <span class=\"comment\">// 2 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>这里简单做一下解释：<br>在bar函数中，foo使用apply函数绑定了obj，也就是说foo中的this将指向obj，与此同时，使用arguments（不限制传入参数的数量）作为参数传入foo函数中；所以在运行bar(3)的时候，首先输出obj.a也就是2和传入的3，然后foo返回了两者的相加值，所以b的值为5</p>\n<p>同样，本例也可以使用<code>bind</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"> something </span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a, something)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(obj)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = bar(<span class=\"number\">3</span>); <span class=\"comment\">// 2 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>在传统面向类的语言中，使用new初始化类的时候会调用类中的构造函数，但是JS中new的机制实际上和面向类和语言完全不同。</p>\n<p>使用<code>new</code>来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：</p>\n<ul>\n<li>创建（或者说构造）一个全新的对象</li>\n<li>这个新对象会被执行[[Prototype]]连接</li>\n<li>这个新对象会绑定到函数调用的this</li>\n<li>如果函数没有返回其他对象，那么new表达式中的函数会自动返回这个新对象<br>如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = a</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar.a); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>使用new来调用foo(…)时，我们会构造一个新对象并把它绑定到foo(…)调用中的this上。new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。</p>\n<h1 id=\"this的优先级\"><a href=\"#this的优先级\" class=\"headerlink\" title=\"this的优先级\"></a>this的优先级</h1><p>毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。</p>\n<p>隐式绑定和显式绑定哪个优先级更高？我们来测试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(); <span class=\"comment\">// 2</span></div><div class=\"line\">obj2.foo(); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\">obj1.foo.call(obj2); <span class=\"comment\">// 3</span></div><div class=\"line\">obj2.foo.call(obj1); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>可以看到，<code>显式绑定</code>优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。</p>\n<p>现在我们要搞清楚<code>new绑定</code>和<code>隐式绑定</code>的优先级谁高谁低 ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: foo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">obj1.foo.call(obj2,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> obj1.foo(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar.a); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n<p>可以看到<code>new绑定</code>比<code>隐式绑定</code>优先级高。但是<code>new绑定</code>和<code>显式绑定</code>谁的优先级更高呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">something</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(obj1);</div><div class=\"line\">bar(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> bar(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.a); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(baz.a); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>可以看到，<code>new绑定</code>修改了<code>硬绑定</code>中的this，所以<code>new绑定</code>的优先级比<code>显式绑定</code>更高。</p>\n<p>之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行初始化时就可以只传入其余的参数。bind(…)的功能之一就是可以把除了第一个参数（第一个参数用于绑定this）之外的其他参数都传给下层的函数（这种技术称为“部分应用”，是“<code>柯里化</code>”的一种）。举例来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1,p2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.val = p1 + p2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 之所以使用null是因为在本例中我们并不关心硬绑定的this是什么</span></div><div class=\"line\"><span class=\"comment\">// 反正使用new时this会被修改</span></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.bind(<span class=\"literal\">null</span>,<span class=\"string\">'p1'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> bar(<span class=\"string\">'p2'</span>);</div><div class=\"line\"></div><div class=\"line\">baz.val; <span class=\"comment\">// p1p2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>柯里化:在直觉上，柯里化声称“如果你固定某些参数，你将得到接受余下参数的一个函数”。所以对于有两个变量的函数yx，如果固定了 y = 2，则得到有一个变量的函数 2x</p>\n</blockquote>\n<h1 id=\"This在箭头函数中的应用\"><a href=\"#This在箭头函数中的应用\" class=\"headerlink\" title=\"This在箭头函数中的应用\"></a>This在箭头函数中的应用</h1><p>箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p>\n<p>我们来看一下箭头函数的词法作用域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 返回一个箭头函数</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// this继承自foo()</span></div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj1);</div><div class=\"line\">bar.call(obj2); <span class=\"comment\">// 2, 不是3！</span></div></pre></td></tr></table></figure>\n<p>foo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行!）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果要判断一个运行中的函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。</p>\n<ol>\n<li>由new调用？绑定到新创建的对象。</li>\n<li>由call或者apply（或者bind）调用？绑定到指定的对象。</li>\n<li>由上下文对象调用？绑定到那个上下文对象。</li>\n<li>默认：在严格模式下绑定到undefined，否则绑定到全局对象。</li>\n</ol>\n"},{"title":"Vue2+Echarts实现多种图表数据可视化","cover":"http://bpic.588ku.com/back_pic/00/01/54/555604115c64ab3.jpg!/fh/300/quality/90/unsharp/true/compress/true","_content":"\n> 将数据通过图表的形式展现出来将大大的提升可读性和阅读效率\n\n> 本例包含柱状图、折线图、散点图、热力图、复杂柱状图、预览面板等\n\n# 技术栈\n\n- vue2.x\n- vuex _存储公共变量，如色值等_\n- vue-router _路由_\n- element-ui _饿了么基于vue2开发组件库，本例使用了其中的datePicker_\n- echarts _一款丰富的图表库_\n- webpack、ES6、Babel、Stylus...\n\nGitHub地址（欢迎来star和提建议^_^）：[https://github.com/SimonZhangITer/DataVisualization](https://github.com/SimonZhangITer/DataVisualization)\n\n# 演示\n\n<div align=center style=\"margin-top:30px\">此项目为PC端数据可视化，请在电脑端查看</div>\n<div align=center><a href=\"https://simonzhangiter.github.io/DataVisualization\" target=_blank>在线演示戳我</a></div>\n\n# 项目截图\n\n<div align=center><img src=\"https://static.oschina.net/uploads/space/2017/0214/162200_cHAf_2493500.png\"></div>\n\n# 开发\n\n## 组件化\n\n本项目完全采用组件化的思想进行开发。使用vue-router作为路由，每个页面都是一个组件，每个组件里又包含多个组件。可以看到，多种图表的标题和日期筛选等都是类似的格式，所以这两个都分别做成了组件。\n\n除此之外，在筛选产品的时候用到的checkbox也被我写成了组件，有需要的朋友也可以剥离出去单独使用（不过写的比较粗糙~）\n\n每个图表都是一个单独的组件，也可以单独的剥离出去使用。\n\n## 柱状图\n\n本项目包含多种图表，这里挑“柱状图”说一说，其他的图标实现方式类似。\n\n```html\n<template>\n<div class=\"multipleColumn\">\n  <v-header :name=\"name\" :legendArr=\"legendArr\" :myChart=\"myChart\"></v-header>\n  <v-filter :myChart=\"myChart\" v-if=\"myChart._dom\"></v-filter>\n  <div class=\"main\"></div>\n</div>\n</template>\n```\n页面HTML可以看到，一个完整的图标是由三个部分组成：\n\n\n\n### v-header\n头组件，存放标题以及不同类型的筛选等\n\n- name _图表的标题_\n- legendArr _图表所包含的多种类型_\n- myChart _当前图表对象_\n\n### v-filter\n\n筛选组件，日期的筛选以及不同产品的筛选\n\n- myChart _当前图表对象_\n\nv-if=\"myChart._dom\"表示在当前图表dom元素渲染完成之后再渲染filter组件\n\n### main\n\n_图表的主体文件_\n\n需要注意的是：<font color=red>main必须要指定宽高，否则echarts无法渲染dom</font>\n\n### 初始化\n\n初始化需要在vue的mounted()方法里执行，因为这里能保证当前的页面元素都已经被加载完成。\n\n```javascript\nmounted() {\n  // 基于准备好的dom，初始化echarts实例\n  this.myChart = echarts.init(document.querySelector('.multipleColumn .main'))\n  this.myChart.setOption(this.options) //this.options为echarts的配置，详情可去我的gitHub查看\n}\n```\n\n如果要在created()方法里执行，则需要另外加上\n\n```javascript\nthis.$nextTick(() => {\n  this._init()\n})\n```\n\n## DashBoard\n\ndashboard是一个所有图表的预览，并且有一个点击切换的动画效果，这里大概讲解一个实现方式。\n\n### html\n\n```html\n<template lang=\"html\">\n  <div class=\"dashboard\">\n    <div class=\"flex-container column\">\n        <div class=\"item one\" @click=\"clickChart('1')\" style=\"transform: translate(-22.4%,-33.5%) scale(0.33)\">\n          <multipleColumn></multipleColumn>\n        </div>\n        <div class=\"item two\" @click=\"clickChart('2')\" style=\"transform: translate(-22.4%,0.5%) scale(0.33)\">\n          <column></column>\n        </div>\n        <div class=\"item three\" @click=\"clickChart('3')\" style=\"transform: translate(-22.4%,34.5%) scale(0.33)\">\n          <v-line></v-line>\n        </div>\n        <div class=\"item four active\" @click=\"clickChart('4')\" style=\"transform: translate(43.7%, 0) scale(1)\">\n          <point></point>\n        </div>\n    </div>\n  </div>\n</template>\n```\n可以看到，这里是设置了四张图表的Wrapper，每个Wrapper里面装一个图表组件。通过动态的改变style样式来切换。\n\n整体的思想为：\n\n- 使用百分比布局，这样才能在不能大小的屏幕做到自适应\n- 确定图表显示比例，长宽比\n- 只做一个transform变换，这样才能提高性能\n\n### 性能\n\n关于性能方面，这里多说一句：\n\n相信大家都看过在线演示的demo了，不同图表间的切换不仅有位置的变换，还有大小的变换。那么大小的变换大家都知道是用transform的scale变换，但是位置的变换呢，使用left、top？\n\n很显然这样是不对的，但是这样确实也能实现效果，但是会非常的消耗性能。一个CSS属性的变化就相当于一个线程，那么如果使用了left、top以及transform的话就是三个线程同时开启，那你的电脑温度将会很快飙升的\n\n正确的解决方案还是继续使用transform，使用它的<font color=red> translate </font>，如：\n\n```css\ntransform: translate(-22.4%,0) scale(0.33)\n```\n\n# 结语\n\n这个项目还是挺实用的一个项目，最大程度的运用了vue的组件化思想。\n\n大家感兴趣的可以去看看，希望对大家有帮助。\n\n[https://github.com/SimonZhangITer/DataVisualization](https://github.com/SimonZhangITer/DataVisualization)\n","source":"_posts/echartsDashboard.md","raw":"---\ntitle: Vue2+Echarts实现多种图表数据可视化\ncategories: Vue\ntags: [vue,vue-router,vuex,echarts,ES6,axios,webpack]\ncover: http://bpic.588ku.com/back_pic/00/01/54/555604115c64ab3.jpg!/fh/300/quality/90/unsharp/true/compress/true\n---\n\n> 将数据通过图表的形式展现出来将大大的提升可读性和阅读效率\n\n> 本例包含柱状图、折线图、散点图、热力图、复杂柱状图、预览面板等\n\n# 技术栈\n\n- vue2.x\n- vuex _存储公共变量，如色值等_\n- vue-router _路由_\n- element-ui _饿了么基于vue2开发组件库，本例使用了其中的datePicker_\n- echarts _一款丰富的图表库_\n- webpack、ES6、Babel、Stylus...\n\nGitHub地址（欢迎来star和提建议^_^）：[https://github.com/SimonZhangITer/DataVisualization](https://github.com/SimonZhangITer/DataVisualization)\n\n# 演示\n\n<div align=center style=\"margin-top:30px\">此项目为PC端数据可视化，请在电脑端查看</div>\n<div align=center><a href=\"https://simonzhangiter.github.io/DataVisualization\" target=_blank>在线演示戳我</a></div>\n\n# 项目截图\n\n<div align=center><img src=\"https://static.oschina.net/uploads/space/2017/0214/162200_cHAf_2493500.png\"></div>\n\n# 开发\n\n## 组件化\n\n本项目完全采用组件化的思想进行开发。使用vue-router作为路由，每个页面都是一个组件，每个组件里又包含多个组件。可以看到，多种图表的标题和日期筛选等都是类似的格式，所以这两个都分别做成了组件。\n\n除此之外，在筛选产品的时候用到的checkbox也被我写成了组件，有需要的朋友也可以剥离出去单独使用（不过写的比较粗糙~）\n\n每个图表都是一个单独的组件，也可以单独的剥离出去使用。\n\n## 柱状图\n\n本项目包含多种图表，这里挑“柱状图”说一说，其他的图标实现方式类似。\n\n```html\n<template>\n<div class=\"multipleColumn\">\n  <v-header :name=\"name\" :legendArr=\"legendArr\" :myChart=\"myChart\"></v-header>\n  <v-filter :myChart=\"myChart\" v-if=\"myChart._dom\"></v-filter>\n  <div class=\"main\"></div>\n</div>\n</template>\n```\n页面HTML可以看到，一个完整的图标是由三个部分组成：\n\n\n\n### v-header\n头组件，存放标题以及不同类型的筛选等\n\n- name _图表的标题_\n- legendArr _图表所包含的多种类型_\n- myChart _当前图表对象_\n\n### v-filter\n\n筛选组件，日期的筛选以及不同产品的筛选\n\n- myChart _当前图表对象_\n\nv-if=\"myChart._dom\"表示在当前图表dom元素渲染完成之后再渲染filter组件\n\n### main\n\n_图表的主体文件_\n\n需要注意的是：<font color=red>main必须要指定宽高，否则echarts无法渲染dom</font>\n\n### 初始化\n\n初始化需要在vue的mounted()方法里执行，因为这里能保证当前的页面元素都已经被加载完成。\n\n```javascript\nmounted() {\n  // 基于准备好的dom，初始化echarts实例\n  this.myChart = echarts.init(document.querySelector('.multipleColumn .main'))\n  this.myChart.setOption(this.options) //this.options为echarts的配置，详情可去我的gitHub查看\n}\n```\n\n如果要在created()方法里执行，则需要另外加上\n\n```javascript\nthis.$nextTick(() => {\n  this._init()\n})\n```\n\n## DashBoard\n\ndashboard是一个所有图表的预览，并且有一个点击切换的动画效果，这里大概讲解一个实现方式。\n\n### html\n\n```html\n<template lang=\"html\">\n  <div class=\"dashboard\">\n    <div class=\"flex-container column\">\n        <div class=\"item one\" @click=\"clickChart('1')\" style=\"transform: translate(-22.4%,-33.5%) scale(0.33)\">\n          <multipleColumn></multipleColumn>\n        </div>\n        <div class=\"item two\" @click=\"clickChart('2')\" style=\"transform: translate(-22.4%,0.5%) scale(0.33)\">\n          <column></column>\n        </div>\n        <div class=\"item three\" @click=\"clickChart('3')\" style=\"transform: translate(-22.4%,34.5%) scale(0.33)\">\n          <v-line></v-line>\n        </div>\n        <div class=\"item four active\" @click=\"clickChart('4')\" style=\"transform: translate(43.7%, 0) scale(1)\">\n          <point></point>\n        </div>\n    </div>\n  </div>\n</template>\n```\n可以看到，这里是设置了四张图表的Wrapper，每个Wrapper里面装一个图表组件。通过动态的改变style样式来切换。\n\n整体的思想为：\n\n- 使用百分比布局，这样才能在不能大小的屏幕做到自适应\n- 确定图表显示比例，长宽比\n- 只做一个transform变换，这样才能提高性能\n\n### 性能\n\n关于性能方面，这里多说一句：\n\n相信大家都看过在线演示的demo了，不同图表间的切换不仅有位置的变换，还有大小的变换。那么大小的变换大家都知道是用transform的scale变换，但是位置的变换呢，使用left、top？\n\n很显然这样是不对的，但是这样确实也能实现效果，但是会非常的消耗性能。一个CSS属性的变化就相当于一个线程，那么如果使用了left、top以及transform的话就是三个线程同时开启，那你的电脑温度将会很快飙升的\n\n正确的解决方案还是继续使用transform，使用它的<font color=red> translate </font>，如：\n\n```css\ntransform: translate(-22.4%,0) scale(0.33)\n```\n\n# 结语\n\n这个项目还是挺实用的一个项目，最大程度的运用了vue的组件化思想。\n\n大家感兴趣的可以去看看，希望对大家有帮助。\n\n[https://github.com/SimonZhangITer/DataVisualization](https://github.com/SimonZhangITer/DataVisualization)\n","slug":"echartsDashboard","published":1,"date":"2017-02-14T07:20:56.000Z","updated":"2017-04-08T08:57:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj272b9jl000ezsyf2m3uvkfc","content":"<blockquote>\n<p>将数据通过图表的形式展现出来将大大的提升可读性和阅读效率</p>\n<p>本例包含柱状图、折线图、散点图、热力图、复杂柱状图、预览面板等</p>\n</blockquote>\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1><ul>\n<li>vue2.x</li>\n<li>vuex <em>存储公共变量，如色值等</em></li>\n<li>vue-router <em>路由</em></li>\n<li>element-ui <em>饿了么基于vue2开发组件库，本例使用了其中的datePicker</em></li>\n<li>echarts <em>一款丰富的图表库</em></li>\n<li>webpack、ES6、Babel、Stylus…</li>\n</ul>\n<p>GitHub地址（欢迎来star和提建议^_^）：<a href=\"https://github.com/SimonZhangITer/DataVisualization\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/DataVisualization</a></p>\n<h1 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h1><div align=\"center\" style=\"margin-top:30px\">此项目为PC端数据可视化，请在电脑端查看</div><br><div align=\"center\"><a href=\"https://simonzhangiter.github.io/DataVisualization\" target=\"_blank\">在线演示戳我</a></div>\n\n<h1 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h1><div align=\"center\"><img src=\"https://static.oschina.net/uploads/space/2017/0214/162200_cHAf_2493500.png\"></div>\n\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>本项目完全采用组件化的思想进行开发。使用vue-router作为路由，每个页面都是一个组件，每个组件里又包含多个组件。可以看到，多种图表的标题和日期筛选等都是类似的格式，所以这两个都分别做成了组件。</p>\n<p>除此之外，在筛选产品的时候用到的checkbox也被我写成了组件，有需要的朋友也可以剥离出去单独使用（不过写的比较粗糙~）</p>\n<p>每个图表都是一个单独的组件，也可以单独的剥离出去使用。</p>\n<h2 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h2><p>本项目包含多种图表，这里挑“柱状图”说一说，其他的图标实现方式类似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"multipleColumn\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-header</span> <span class=\"attr\">:name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">:legendArr</span>=<span class=\"string\">\"legendArr\"</span> <span class=\"attr\">:myChart</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-filter</span> <span class=\"attr\">:myChart</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"myChart._dom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-filter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>页面HTML可以看到，一个完整的图标是由三个部分组成：</p>\n<h3 id=\"v-header\"><a href=\"#v-header\" class=\"headerlink\" title=\"v-header\"></a>v-header</h3><p>头组件，存放标题以及不同类型的筛选等</p>\n<ul>\n<li>name <em>图表的标题</em></li>\n<li>legendArr <em>图表所包含的多种类型</em></li>\n<li>myChart <em>当前图表对象</em></li>\n</ul>\n<h3 id=\"v-filter\"><a href=\"#v-filter\" class=\"headerlink\" title=\"v-filter\"></a>v-filter</h3><p>筛选组件，日期的筛选以及不同产品的筛选</p>\n<ul>\n<li>myChart <em>当前图表对象</em></li>\n</ul>\n<p>v-if=”myChart._dom”表示在当前图表dom元素渲染完成之后再渲染filter组件</p>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><em>图表的主体文件</em></p>\n<p>需要注意的是：<font color=\"red\">main必须要指定宽高，否则echarts无法渲染dom</font></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化需要在vue的mounted()方法里执行，因为这里能保证当前的页面元素都已经被加载完成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mounted() &#123;</div><div class=\"line\">  <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.myChart = echarts.init(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.multipleColumn .main'</span>))</div><div class=\"line\">  <span class=\"keyword\">this</span>.myChart.setOption(<span class=\"keyword\">this</span>.options) <span class=\"comment\">//this.options为echarts的配置，详情可去我的gitHub查看</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果要在created()方法里执行，则需要另外加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>._init()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"DashBoard\"><a href=\"#DashBoard\" class=\"headerlink\" title=\"DashBoard\"></a>DashBoard</h2><p>dashboard是一个所有图表的预览，并且有一个点击切换的动画效果，这里大概讲解一个实现方式。</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"html\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dashboard\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-container column\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item one\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('1')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,-33.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">multipleColumn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">multipleColumn</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item two\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('2')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,0.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">column</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item three\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('3')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,34.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">v-line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-line</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item four active\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('4')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(43.7%, 0) scale(1)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">point</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">point</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可以看到，这里是设置了四张图表的Wrapper，每个Wrapper里面装一个图表组件。通过动态的改变style样式来切换。</p>\n<p>整体的思想为：</p>\n<ul>\n<li>使用百分比布局，这样才能在不能大小的屏幕做到自适应</li>\n<li>确定图表显示比例，长宽比</li>\n<li>只做一个transform变换，这样才能提高性能</li>\n</ul>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>关于性能方面，这里多说一句：</p>\n<p>相信大家都看过在线演示的demo了，不同图表间的切换不仅有位置的变换，还有大小的变换。那么大小的变换大家都知道是用transform的scale变换，但是位置的变换呢，使用left、top？</p>\n<p>很显然这样是不对的，但是这样确实也能实现效果，但是会非常的消耗性能。一个CSS属性的变化就相当于一个线程，那么如果使用了left、top以及transform的话就是三个线程同时开启，那你的电脑温度将会很快飙升的</p>\n<p>正确的解决方案还是继续使用transform，使用它的<font color=\"red\"> translate </font>，如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate</span>(<span class=\"selector-tag\">-22</span><span class=\"selector-class\">.4</span>%,0) <span class=\"selector-tag\">scale</span>(0<span class=\"selector-class\">.33</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>这个项目还是挺实用的一个项目，最大程度的运用了vue的组件化思想。</p>\n<p>大家感兴趣的可以去看看，希望对大家有帮助。</p>\n<p><a href=\"https://github.com/SimonZhangITer/DataVisualization\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/DataVisualization</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>将数据通过图表的形式展现出来将大大的提升可读性和阅读效率</p>\n<p>本例包含柱状图、折线图、散点图、热力图、复杂柱状图、预览面板等</p>\n</blockquote>\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1><ul>\n<li>vue2.x</li>\n<li>vuex <em>存储公共变量，如色值等</em></li>\n<li>vue-router <em>路由</em></li>\n<li>element-ui <em>饿了么基于vue2开发组件库，本例使用了其中的datePicker</em></li>\n<li>echarts <em>一款丰富的图表库</em></li>\n<li>webpack、ES6、Babel、Stylus…</li>\n</ul>\n<p>GitHub地址（欢迎来star和提建议^_^）：<a href=\"https://github.com/SimonZhangITer/DataVisualization\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/DataVisualization</a></p>\n<h1 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h1><div align=\"center\" style=\"margin-top:30px\">此项目为PC端数据可视化，请在电脑端查看</div><br><div align=\"center\"><a href=\"https://simonzhangiter.github.io/DataVisualization\" target=\"_blank\">在线演示戳我</a></div>\n\n<h1 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h1><div align=\"center\"><img src=\"https://static.oschina.net/uploads/space/2017/0214/162200_cHAf_2493500.png\"></div>\n\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>本项目完全采用组件化的思想进行开发。使用vue-router作为路由，每个页面都是一个组件，每个组件里又包含多个组件。可以看到，多种图表的标题和日期筛选等都是类似的格式，所以这两个都分别做成了组件。</p>\n<p>除此之外，在筛选产品的时候用到的checkbox也被我写成了组件，有需要的朋友也可以剥离出去单独使用（不过写的比较粗糙~）</p>\n<p>每个图表都是一个单独的组件，也可以单独的剥离出去使用。</p>\n<h2 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h2><p>本项目包含多种图表，这里挑“柱状图”说一说，其他的图标实现方式类似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"multipleColumn\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-header</span> <span class=\"attr\">:name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">:legendArr</span>=<span class=\"string\">\"legendArr\"</span> <span class=\"attr\">:myChart</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-filter</span> <span class=\"attr\">:myChart</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"myChart._dom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-filter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>页面HTML可以看到，一个完整的图标是由三个部分组成：</p>\n<h3 id=\"v-header\"><a href=\"#v-header\" class=\"headerlink\" title=\"v-header\"></a>v-header</h3><p>头组件，存放标题以及不同类型的筛选等</p>\n<ul>\n<li>name <em>图表的标题</em></li>\n<li>legendArr <em>图表所包含的多种类型</em></li>\n<li>myChart <em>当前图表对象</em></li>\n</ul>\n<h3 id=\"v-filter\"><a href=\"#v-filter\" class=\"headerlink\" title=\"v-filter\"></a>v-filter</h3><p>筛选组件，日期的筛选以及不同产品的筛选</p>\n<ul>\n<li>myChart <em>当前图表对象</em></li>\n</ul>\n<p>v-if=”myChart._dom”表示在当前图表dom元素渲染完成之后再渲染filter组件</p>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><em>图表的主体文件</em></p>\n<p>需要注意的是：<font color=\"red\">main必须要指定宽高，否则echarts无法渲染dom</font></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化需要在vue的mounted()方法里执行，因为这里能保证当前的页面元素都已经被加载完成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mounted() &#123;</div><div class=\"line\">  <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.myChart = echarts.init(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.multipleColumn .main'</span>))</div><div class=\"line\">  <span class=\"keyword\">this</span>.myChart.setOption(<span class=\"keyword\">this</span>.options) <span class=\"comment\">//this.options为echarts的配置，详情可去我的gitHub查看</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果要在created()方法里执行，则需要另外加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>._init()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"DashBoard\"><a href=\"#DashBoard\" class=\"headerlink\" title=\"DashBoard\"></a>DashBoard</h2><p>dashboard是一个所有图表的预览，并且有一个点击切换的动画效果，这里大概讲解一个实现方式。</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"html\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dashboard\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-container column\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item one\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('1')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,-33.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">multipleColumn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">multipleColumn</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item two\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('2')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,0.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">column</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item three\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('3')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(-22.4%,34.5%) scale(0.33)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">v-line</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-line</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item four active\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"clickChart('4')\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform: translate(43.7%, 0) scale(1)\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">point</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">point</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可以看到，这里是设置了四张图表的Wrapper，每个Wrapper里面装一个图表组件。通过动态的改变style样式来切换。</p>\n<p>整体的思想为：</p>\n<ul>\n<li>使用百分比布局，这样才能在不能大小的屏幕做到自适应</li>\n<li>确定图表显示比例，长宽比</li>\n<li>只做一个transform变换，这样才能提高性能</li>\n</ul>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>关于性能方面，这里多说一句：</p>\n<p>相信大家都看过在线演示的demo了，不同图表间的切换不仅有位置的变换，还有大小的变换。那么大小的变换大家都知道是用transform的scale变换，但是位置的变换呢，使用left、top？</p>\n<p>很显然这样是不对的，但是这样确实也能实现效果，但是会非常的消耗性能。一个CSS属性的变化就相当于一个线程，那么如果使用了left、top以及transform的话就是三个线程同时开启，那你的电脑温度将会很快飙升的</p>\n<p>正确的解决方案还是继续使用transform，使用它的<font color=\"red\"> translate </font>，如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translate</span>(<span class=\"selector-tag\">-22</span><span class=\"selector-class\">.4</span>%,0) <span class=\"selector-tag\">scale</span>(0<span class=\"selector-class\">.33</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>这个项目还是挺实用的一个项目，最大程度的运用了vue的组件化思想。</p>\n<p>大家感兴趣的可以去看看，希望对大家有帮助。</p>\n<p><a href=\"https://github.com/SimonZhangITer/DataVisualization\" target=\"_blank\" rel=\"external\">https://github.com/SimonZhangITer/DataVisualization</a></p>\n"},{"title":"ES6语句或语句块中的闭包问题详解","cover":"http://bpic.588ku.com/back_pic/00/04/13/75/29f23b37c3fd039e262b957399f6ffcf.jpg","_content":"一般情况下，当一个函数实例被创建时，它唯一对应的一个闭包也就被创建。在下面的代码中，由于外部的构造器函数被执行两次，因此内部的foo函数也被创建了两个函数实例（以及闭包）并赋值给this对象的成员：\n\n```javascript\nfunction MyObject() {\n    function foo() {}\n    this.method = foo;\n}\nobj1 = new MyObject();\nobj2 = new MyObject();\n\n//显示false，表明产生了两个对象\nconsole.log(obj1.method === obj2.method);\n```\n这在函数之外（语句级别）也具有完全相同的表现。在下面的例子中，多个匿名函数的实例被赋给了obj的成员：\n\n```javascript\nvar obj = new Object();\nfor (var i = 0; i < 5; i++) {\n    obj['method' + i] = function() {\n        console.log(i);\n    }\n}\nconsole.log(obj.method2 === obj.method3);\n```\n尽管是多个实例，但它们仍然是共享同一个外层函数闭包中的upvalue值——在上例中，外层函数闭包指的是全局闭包。因此下面例子所变现出来的，仍然只是闭包中对upvalue值访问的规则，而并非闭包或者函数实例的创建规则“出现了某种特例”:\n\n```javascript\nvar obj = new Object();\nvar events = {\n  m1:'clicked',\n  m2:'changed'\n}\nfor(e in events){\n  obj[e] = function () {\n    console.log(events[e]);\n  }\n}\n//显示false，表明是不同的函数实例\nconsole.log(obj.m1 === obj.m2);\n\n//方法m1()和m2()都都出相同值\n//其原因，在于两个方法都访问全局闭包中的同一个upvalue值。\nobj.m1();\nobj.m2();\n```\n在这个例子中，王法m1与m2究竟输出何值，取决于前面的for...in语句在最后一次迭代中对e的置值。某些引擎中总保证for...in的顺序与events中声明时的属性顺序一致（例如SpiderMonkey），但也有一些引擎并没有这项约定。因此上例在不同的引擎中表现的结果未必一致，但m1()与m2()输出值总是相同的。\n\n按照这段代码的本意，应该是每个函数实例输出不同值。对这个问题的处理之一，是再添加一个外层函数，利用“在函数内保存数据”的特性来为内部函数保存一个可访问的upvalue:\n\n```javascript\nvar obj = new Object();\nvar events = {\n    m1: 'clicked',\n    m2: 'changed'\n}\nfor (e in events) {\n    obj[e] = function(aValue) { //闭包lv1\n        return function() { //闭包lv2\n            console.log(events[aValue]);\n        }\n    }(e)\n}\n\n/*或者使用如下代码，在闭包内通过局部变量保存数据。\nfor (e in events) {\n    obj[e] = function() { //闭包lv1\n        var aValue = e;\n        return function() { //闭包lv2\n            console.log(events[aValue]);\n        }\n    }()\n}*/\n\n//下面将输出不同的值\nobj.m1();\nobj.m2();\n```\n由于闭包lv2引用了闭包lv1中的入口参数，因此两个闭包存在了关联关系。在obj的方法未被清除之前，两个闭包都不会被销毁，但lv1为lv2保存了一个可供访问的upvalue——这除了私有变量、函数之外，也包括它的传入参数。\n\n很明显，上例的问题在于多了一层闭包，因此增加了系统消耗。不过这并非不可避免。我们要看清楚这个问题，其本质是一要一个地方来保存for...in列举中的每一个值e,而并非是“需要一个闭包来添加一个层”。那么，既然列举过程中产生了不同的函数实例，自然也可以将值e交给这些函数实例自己去保存：\n\n```javascript\nvar obj = new Object();\nvar events = {\n    m1: 'clicked',\n    m2: 'changed'\n}\nfor (e in events) {\n    (obj[e] = function(aValue) {\n        //arguments.callee指向匿名函数自身\n        console.log(events[arguments.callee.aValue]);\n    }).aValue = e;\n}\n//下面将输出不同的值\nobj.m1();\nobj.m2();\n```\n","source":"_posts/es6-statement.md","raw":"---\ntitle: ES6语句或语句块中的闭包问题详解\ntags: [JavaScript,ES6]\ncategories: JavaScript\ncover: http://bpic.588ku.com/back_pic/00/04/13/75/29f23b37c3fd039e262b957399f6ffcf.jpg\n---\n一般情况下，当一个函数实例被创建时，它唯一对应的一个闭包也就被创建。在下面的代码中，由于外部的构造器函数被执行两次，因此内部的foo函数也被创建了两个函数实例（以及闭包）并赋值给this对象的成员：\n\n```javascript\nfunction MyObject() {\n    function foo() {}\n    this.method = foo;\n}\nobj1 = new MyObject();\nobj2 = new MyObject();\n\n//显示false，表明产生了两个对象\nconsole.log(obj1.method === obj2.method);\n```\n这在函数之外（语句级别）也具有完全相同的表现。在下面的例子中，多个匿名函数的实例被赋给了obj的成员：\n\n```javascript\nvar obj = new Object();\nfor (var i = 0; i < 5; i++) {\n    obj['method' + i] = function() {\n        console.log(i);\n    }\n}\nconsole.log(obj.method2 === obj.method3);\n```\n尽管是多个实例，但它们仍然是共享同一个外层函数闭包中的upvalue值——在上例中，外层函数闭包指的是全局闭包。因此下面例子所变现出来的，仍然只是闭包中对upvalue值访问的规则，而并非闭包或者函数实例的创建规则“出现了某种特例”:\n\n```javascript\nvar obj = new Object();\nvar events = {\n  m1:'clicked',\n  m2:'changed'\n}\nfor(e in events){\n  obj[e] = function () {\n    console.log(events[e]);\n  }\n}\n//显示false，表明是不同的函数实例\nconsole.log(obj.m1 === obj.m2);\n\n//方法m1()和m2()都都出相同值\n//其原因，在于两个方法都访问全局闭包中的同一个upvalue值。\nobj.m1();\nobj.m2();\n```\n在这个例子中，王法m1与m2究竟输出何值，取决于前面的for...in语句在最后一次迭代中对e的置值。某些引擎中总保证for...in的顺序与events中声明时的属性顺序一致（例如SpiderMonkey），但也有一些引擎并没有这项约定。因此上例在不同的引擎中表现的结果未必一致，但m1()与m2()输出值总是相同的。\n\n按照这段代码的本意，应该是每个函数实例输出不同值。对这个问题的处理之一，是再添加一个外层函数，利用“在函数内保存数据”的特性来为内部函数保存一个可访问的upvalue:\n\n```javascript\nvar obj = new Object();\nvar events = {\n    m1: 'clicked',\n    m2: 'changed'\n}\nfor (e in events) {\n    obj[e] = function(aValue) { //闭包lv1\n        return function() { //闭包lv2\n            console.log(events[aValue]);\n        }\n    }(e)\n}\n\n/*或者使用如下代码，在闭包内通过局部变量保存数据。\nfor (e in events) {\n    obj[e] = function() { //闭包lv1\n        var aValue = e;\n        return function() { //闭包lv2\n            console.log(events[aValue]);\n        }\n    }()\n}*/\n\n//下面将输出不同的值\nobj.m1();\nobj.m2();\n```\n由于闭包lv2引用了闭包lv1中的入口参数，因此两个闭包存在了关联关系。在obj的方法未被清除之前，两个闭包都不会被销毁，但lv1为lv2保存了一个可供访问的upvalue——这除了私有变量、函数之外，也包括它的传入参数。\n\n很明显，上例的问题在于多了一层闭包，因此增加了系统消耗。不过这并非不可避免。我们要看清楚这个问题，其本质是一要一个地方来保存for...in列举中的每一个值e,而并非是“需要一个闭包来添加一个层”。那么，既然列举过程中产生了不同的函数实例，自然也可以将值e交给这些函数实例自己去保存：\n\n```javascript\nvar obj = new Object();\nvar events = {\n    m1: 'clicked',\n    m2: 'changed'\n}\nfor (e in events) {\n    (obj[e] = function(aValue) {\n        //arguments.callee指向匿名函数自身\n        console.log(events[arguments.callee.aValue]);\n    }).aValue = e;\n}\n//下面将输出不同的值\nobj.m1();\nobj.m2();\n```\n","slug":"es6-statement","published":1,"date":"2016-09-12T09:17:28.000Z","updated":"2017-04-08T08:56:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj272b9jq000gzsyfa5lya1wi","content":"<p>一般情况下，当一个函数实例被创建时，它唯一对应的一个闭包也就被创建。在下面的代码中，由于外部的构造器函数被执行两次，因此内部的foo函数也被创建了两个函数实例（以及闭包）并赋值给this对象的成员：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.method = foo;</div><div class=\"line\">&#125;</div><div class=\"line\">obj1 = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\">obj2 = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示false，表明产生了两个对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.method === obj2.method);</div></pre></td></tr></table></figure>\n<p>这在函数之外（语句级别）也具有完全相同的表现。在下面的例子中，多个匿名函数的实例被赋给了obj的成员：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    obj[<span class=\"string\">'method'</span> + i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.method2 === obj.method3);</div></pre></td></tr></table></figure>\n<p>尽管是多个实例，但它们仍然是共享同一个外层函数闭包中的upvalue值——在上例中，外层函数闭包指的是全局闭包。因此下面例子所变现出来的，仍然只是闭包中对upvalue值访问的规则，而并非闭包或者函数实例的创建规则“出现了某种特例”:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">  <span class=\"attr\">m1</span>:<span class=\"string\">'clicked'</span>,</div><div class=\"line\">  <span class=\"attr\">m2</span>:<span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(e <span class=\"keyword\">in</span> events)&#123;</div><div class=\"line\">  obj[e] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(events[e]);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//显示false，表明是不同的函数实例</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.m1 === obj.m2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法m1()和m2()都都出相同值</span></div><div class=\"line\"><span class=\"comment\">//其原因，在于两个方法都访问全局闭包中的同一个upvalue值。</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n<p>在这个例子中，王法m1与m2究竟输出何值，取决于前面的for…in语句在最后一次迭代中对e的置值。某些引擎中总保证for…in的顺序与events中声明时的属性顺序一致（例如SpiderMonkey），但也有一些引擎并没有这项约定。因此上例在不同的引擎中表现的结果未必一致，但m1()与m2()输出值总是相同的。</p>\n<p>按照这段代码的本意，应该是每个函数实例输出不同值。对这个问题的处理之一，是再添加一个外层函数，利用“在函数内保存数据”的特性来为内部函数保存一个可访问的upvalue:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">    <span class=\"attr\">m1</span>: <span class=\"string\">'clicked'</span>,</div><div class=\"line\">    <span class=\"attr\">m2</span>: <span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (e <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">    obj[e] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aValue</span>) </span>&#123; <span class=\"comment\">//闭包lv1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//闭包lv2</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(events[aValue]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;(e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*或者使用如下代码，在闭包内通过局部变量保存数据。</span></div><div class=\"line\">for (e in events) &#123;</div><div class=\"line\">    obj[e] = function() &#123; //闭包lv1</div><div class=\"line\">        var aValue = e;</div><div class=\"line\">        return function() &#123; //闭包lv2</div><div class=\"line\">            console.log(events[aValue]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\">&#125;*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面将输出不同的值</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n<p>由于闭包lv2引用了闭包lv1中的入口参数，因此两个闭包存在了关联关系。在obj的方法未被清除之前，两个闭包都不会被销毁，但lv1为lv2保存了一个可供访问的upvalue——这除了私有变量、函数之外，也包括它的传入参数。</p>\n<p>很明显，上例的问题在于多了一层闭包，因此增加了系统消耗。不过这并非不可避免。我们要看清楚这个问题，其本质是一要一个地方来保存for…in列举中的每一个值e,而并非是“需要一个闭包来添加一个层”。那么，既然列举过程中产生了不同的函数实例，自然也可以将值e交给这些函数实例自己去保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">    <span class=\"attr\">m1</span>: <span class=\"string\">'clicked'</span>,</div><div class=\"line\">    <span class=\"attr\">m2</span>: <span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (e <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">    (obj[e] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//arguments.callee指向匿名函数自身</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(events[<span class=\"built_in\">arguments</span>.callee.aValue]);</div><div class=\"line\">    &#125;).aValue = e;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//下面将输出不同的值</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一般情况下，当一个函数实例被创建时，它唯一对应的一个闭包也就被创建。在下面的代码中，由于外部的构造器函数被执行两次，因此内部的foo函数也被创建了两个函数实例（以及闭包）并赋值给this对象的成员：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.method = foo;</div><div class=\"line\">&#125;</div><div class=\"line\">obj1 = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\">obj2 = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//显示false，表明产生了两个对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.method === obj2.method);</div></pre></td></tr></table></figure>\n<p>这在函数之外（语句级别）也具有完全相同的表现。在下面的例子中，多个匿名函数的实例被赋给了obj的成员：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    obj[<span class=\"string\">'method'</span> + i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.method2 === obj.method3);</div></pre></td></tr></table></figure>\n<p>尽管是多个实例，但它们仍然是共享同一个外层函数闭包中的upvalue值——在上例中，外层函数闭包指的是全局闭包。因此下面例子所变现出来的，仍然只是闭包中对upvalue值访问的规则，而并非闭包或者函数实例的创建规则“出现了某种特例”:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">  <span class=\"attr\">m1</span>:<span class=\"string\">'clicked'</span>,</div><div class=\"line\">  <span class=\"attr\">m2</span>:<span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(e <span class=\"keyword\">in</span> events)&#123;</div><div class=\"line\">  obj[e] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(events[e]);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//显示false，表明是不同的函数实例</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.m1 === obj.m2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法m1()和m2()都都出相同值</span></div><div class=\"line\"><span class=\"comment\">//其原因，在于两个方法都访问全局闭包中的同一个upvalue值。</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n<p>在这个例子中，王法m1与m2究竟输出何值，取决于前面的for…in语句在最后一次迭代中对e的置值。某些引擎中总保证for…in的顺序与events中声明时的属性顺序一致（例如SpiderMonkey），但也有一些引擎并没有这项约定。因此上例在不同的引擎中表现的结果未必一致，但m1()与m2()输出值总是相同的。</p>\n<p>按照这段代码的本意，应该是每个函数实例输出不同值。对这个问题的处理之一，是再添加一个外层函数，利用“在函数内保存数据”的特性来为内部函数保存一个可访问的upvalue:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">    <span class=\"attr\">m1</span>: <span class=\"string\">'clicked'</span>,</div><div class=\"line\">    <span class=\"attr\">m2</span>: <span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (e <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">    obj[e] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aValue</span>) </span>&#123; <span class=\"comment\">//闭包lv1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//闭包lv2</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(events[aValue]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;(e)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*或者使用如下代码，在闭包内通过局部变量保存数据。</span></div><div class=\"line\">for (e in events) &#123;</div><div class=\"line\">    obj[e] = function() &#123; //闭包lv1</div><div class=\"line\">        var aValue = e;</div><div class=\"line\">        return function() &#123; //闭包lv2</div><div class=\"line\">            console.log(events[aValue]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\">&#125;*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面将输出不同的值</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n<p>由于闭包lv2引用了闭包lv1中的入口参数，因此两个闭包存在了关联关系。在obj的方法未被清除之前，两个闭包都不会被销毁，但lv1为lv2保存了一个可供访问的upvalue——这除了私有变量、函数之外，也包括它的传入参数。</p>\n<p>很明显，上例的问题在于多了一层闭包，因此增加了系统消耗。不过这并非不可避免。我们要看清楚这个问题，其本质是一要一个地方来保存for…in列举中的每一个值e,而并非是“需要一个闭包来添加一个层”。那么，既然列举过程中产生了不同的函数实例，自然也可以将值e交给这些函数实例自己去保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> events = &#123;</div><div class=\"line\">    <span class=\"attr\">m1</span>: <span class=\"string\">'clicked'</span>,</div><div class=\"line\">    <span class=\"attr\">m2</span>: <span class=\"string\">'changed'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (e <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">    (obj[e] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//arguments.callee指向匿名函数自身</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(events[<span class=\"built_in\">arguments</span>.callee.aValue]);</div><div class=\"line\">    &#125;).aValue = e;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//下面将输出不同的值</span></div><div class=\"line\">obj.m1();</div><div class=\"line\">obj.m2();</div></pre></td></tr></table></figure>\n"},{"title":"vue2构建高仿饿了么平台以及遇到的坑","cover":"http://bpic.588ku.com/back_pic/03/70/33/0457b65f789abb3.jpg","_content":"> 一直对vue很感兴趣，最近使用vue2.0开发了高仿饿了么点餐系统来练练手，不得不说vue真是一个很不错的框架，但是也遇到过一些坑，在这里和大家分享一下\n\n# 饿了么点餐系统\n\n> vue2.0、vuex、vue-router、axios、webpack、eslint、better-scroll\n\n\n## 演示\n\n<a href=\"https://simonzhangiter.github.io/VueDemo_Sell_Eleme\" target=_blank>在线演示戳我</a>（请使用chrome开发者手机演示模式预览）\n\n### 移动端演示\n扫二维码在手机上查看效果更好\n\n<img src=\"https://static.oschina.net/uploads/space/2017/0207/180535_4FSI_2493500.png\" width=\"25%\">\n\n\n## 组件\n\n- 购物车\n- 购买物品小球飞入动画\n- 评价star组件\n- 商品添加、删除组件\n- 优惠图标组件\n- 目录、列表联动滚动\n- 画廊\n- 评论的是否满意和内容筛选\n- 商品列表页面\n- 店铺评价页面\n- 商家介绍页面\n- 优惠活动页面\n- 商品详情页面\n\n## 构建\n\nvue有自己的脚手架构建工具vue-cli,使用起来非常方便，使用webpack来集成各种开发便捷工具，比如：\n\n- 代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便\n- PostCss，再也不用去管兼容性的问题了，只针对chrome写css代码，会自动编译生成支持多款浏览器的css代码\n- Eslint，统一代码风格，规避低级错误，对于有代码洁癖的人来说是绝对的好东西，不过有些地方的代码校验有时候也挺麻烦的-.-\n- bable，ES2015出来已经有一段时间了，但是不少浏览器还没有兼容ES6.有了bable，放心使用ES6语法，它会自动转义成ES5语法。\n- Stylus，类似于SASS/SCSS，但是可以不写{}和“：”，使用起来还是很方便的\n- ...\n\n除此之外，vue-cli已经使用node配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便\n\n## 开发\n\nvue非常好的融合了react的组件化思想和angular的指令思想。\n一个vue的组件将HTML、CSS、JS代码写在一个文件里面，这样既方便编写，也方便管理和修改\n\n### Axios\n\n在vue1.x的时候，vue的官方推荐HTTP请求工具是vue-resource，但是在vue2.0的时候将推荐工具改成了axios。\n\n使用方式都差不多，但需要注意的是：接口返回的res并不直接是返回的数据，而是经过axios本身处理过的json对象。真正的数据在res.data里：\n\n```javascript\naxios.get(url).then((res)=>{\n  this.data = res.data\n})\n```\n\n### Vuex\n\nvue提供了一个数据管理工具vuex，有点类似于angular中factory和service，可以进行数据上的通信。\n比如存储一些公共变量或者是不同组件间的数据处理等。\n\n这个有一些高级用法在这里不细说，想要了解的可以去官方文档看，有中文版本。\n\n```javascript\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n    }\n  }\n})\n```\n\n### Vue-Router\n\nvue-router是vue的路由系统，可以用来创建单页应用。基本思想是在主页面中引入<router-view>标签，然后定义路由，把router挂在到app上，然后把各个子页面渲染到view里面。使用起来还是很方便的，\n跳转页面只需要\n\n```javascript\nrouter.push('test')\n```\n\n### 获取元素节点\n\nvue2.0废除了v-el指令，所有的节点指令修改为ref，然后通过ref来获取元素节点，如\n\n```html\n<div ref=\"testHook\">test</div>\n...js code\nthis.$ref.testHook\n```\n\n### 组件间的通信\n\n一。如果是和子组件通信，则使用ref就可以实现，如：\n\n```html\n<test ref=\"testHook\"></test>\n...js code\nthis.$ref.testHook.add() //调用test子组件的add方法\n```\n\n二。使用emit来发送广播\n\nvue2提供了一套广播机制，即一边发送广播，一边接收广播来执行相应操作。使用方法如下：\n\n比如想要给test组件发送一个“相加”广播:\n\n```javascript\nexport default {\n  method:{\n  \tclick(){\n  \t  Vue.$emit('add',{}) //第二个参数可作为传递数据传送到监听端口，不需要则传空对象\n  \t}\n  }\n}\n```\n\n那么test组件中就需要监听，在created方法里写\n\n```javascript\nexport default {\n  created(){\n   Vue.$on('add',this.add)\n  },\n  method:{\n  \tadd(){\n  \t  this.count++\n  \t}\n  }\n}\n```\n\n\n除了以上总结的这点小的知识点以外，还有很多vue的知识想要和大家分享，以后会陆续写出来，大家感兴趣的也可以来我的GitHub一起来写这个项目（觉得不错的给个star Hah）\n\n## 安装步骤\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n```\n## 项目截图\n\n<img src=\"https://static.oschina.net/uploads/space/2017/0207/110250_3uWi_2493500.jpeg\" width=\"40%\"/>&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cloud.githubusercontent.com/assets/20501873/24188896/ff2c5910-0f1d-11e7-80c0-bc28fd84fe80.png\" width=\"40%\"/>\n\n## 交流\n\n欢迎热爱学习、忠于分享的胖友一起来交流\n\n- QQ：745913574\n\n- QQ群：149683643\n","source":"_posts/eleme.md","raw":"---\ntitle: vue2构建高仿饿了么平台以及遇到的坑\ntags: [vue,vue-router,vuex,axios,webpack,ES6]\ncategories: [vue]\ncover: http://bpic.588ku.com/back_pic/03/70/33/0457b65f789abb3.jpg\n---\n> 一直对vue很感兴趣，最近使用vue2.0开发了高仿饿了么点餐系统来练练手，不得不说vue真是一个很不错的框架，但是也遇到过一些坑，在这里和大家分享一下\n\n# 饿了么点餐系统\n\n> vue2.0、vuex、vue-router、axios、webpack、eslint、better-scroll\n\n\n## 演示\n\n<a href=\"https://simonzhangiter.github.io/VueDemo_Sell_Eleme\" target=_blank>在线演示戳我</a>（请使用chrome开发者手机演示模式预览）\n\n### 移动端演示\n扫二维码在手机上查看效果更好\n\n<img src=\"https://static.oschina.net/uploads/space/2017/0207/180535_4FSI_2493500.png\" width=\"25%\">\n\n\n## 组件\n\n- 购物车\n- 购买物品小球飞入动画\n- 评价star组件\n- 商品添加、删除组件\n- 优惠图标组件\n- 目录、列表联动滚动\n- 画廊\n- 评论的是否满意和内容筛选\n- 商品列表页面\n- 店铺评价页面\n- 商家介绍页面\n- 优惠活动页面\n- 商品详情页面\n\n## 构建\n\nvue有自己的脚手架构建工具vue-cli,使用起来非常方便，使用webpack来集成各种开发便捷工具，比如：\n\n- 代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便\n- PostCss，再也不用去管兼容性的问题了，只针对chrome写css代码，会自动编译生成支持多款浏览器的css代码\n- Eslint，统一代码风格，规避低级错误，对于有代码洁癖的人来说是绝对的好东西，不过有些地方的代码校验有时候也挺麻烦的-.-\n- bable，ES2015出来已经有一段时间了，但是不少浏览器还没有兼容ES6.有了bable，放心使用ES6语法，它会自动转义成ES5语法。\n- Stylus，类似于SASS/SCSS，但是可以不写{}和“：”，使用起来还是很方便的\n- ...\n\n除此之外，vue-cli已经使用node配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便\n\n## 开发\n\nvue非常好的融合了react的组件化思想和angular的指令思想。\n一个vue的组件将HTML、CSS、JS代码写在一个文件里面，这样既方便编写，也方便管理和修改\n\n### Axios\n\n在vue1.x的时候，vue的官方推荐HTTP请求工具是vue-resource，但是在vue2.0的时候将推荐工具改成了axios。\n\n使用方式都差不多，但需要注意的是：接口返回的res并不直接是返回的数据，而是经过axios本身处理过的json对象。真正的数据在res.data里：\n\n```javascript\naxios.get(url).then((res)=>{\n  this.data = res.data\n})\n```\n\n### Vuex\n\nvue提供了一个数据管理工具vuex，有点类似于angular中factory和service，可以进行数据上的通信。\n比如存储一些公共变量或者是不同组件间的数据处理等。\n\n这个有一些高级用法在这里不细说，想要了解的可以去官方文档看，有中文版本。\n\n```javascript\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n    }\n  }\n})\n```\n\n### Vue-Router\n\nvue-router是vue的路由系统，可以用来创建单页应用。基本思想是在主页面中引入<router-view>标签，然后定义路由，把router挂在到app上，然后把各个子页面渲染到view里面。使用起来还是很方便的，\n跳转页面只需要\n\n```javascript\nrouter.push('test')\n```\n\n### 获取元素节点\n\nvue2.0废除了v-el指令，所有的节点指令修改为ref，然后通过ref来获取元素节点，如\n\n```html\n<div ref=\"testHook\">test</div>\n...js code\nthis.$ref.testHook\n```\n\n### 组件间的通信\n\n一。如果是和子组件通信，则使用ref就可以实现，如：\n\n```html\n<test ref=\"testHook\"></test>\n...js code\nthis.$ref.testHook.add() //调用test子组件的add方法\n```\n\n二。使用emit来发送广播\n\nvue2提供了一套广播机制，即一边发送广播，一边接收广播来执行相应操作。使用方法如下：\n\n比如想要给test组件发送一个“相加”广播:\n\n```javascript\nexport default {\n  method:{\n  \tclick(){\n  \t  Vue.$emit('add',{}) //第二个参数可作为传递数据传送到监听端口，不需要则传空对象\n  \t}\n  }\n}\n```\n\n那么test组件中就需要监听，在created方法里写\n\n```javascript\nexport default {\n  created(){\n   Vue.$on('add',this.add)\n  },\n  method:{\n  \tadd(){\n  \t  this.count++\n  \t}\n  }\n}\n```\n\n\n除了以上总结的这点小的知识点以外，还有很多vue的知识想要和大家分享，以后会陆续写出来，大家感兴趣的也可以来我的GitHub一起来写这个项目（觉得不错的给个star Hah）\n\n## 安装步骤\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n```\n## 项目截图\n\n<img src=\"https://static.oschina.net/uploads/space/2017/0207/110250_3uWi_2493500.jpeg\" width=\"40%\"/>&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cloud.githubusercontent.com/assets/20501873/24188896/ff2c5910-0f1d-11e7-80c0-bc28fd84fe80.png\" width=\"40%\"/>\n\n## 交流\n\n欢迎热爱学习、忠于分享的胖友一起来交流\n\n- QQ：745913574\n\n- QQ群：149683643\n","slug":"eleme","published":1,"date":"2017-03-24T06:21:05.000Z","updated":"2017-04-08T08:57:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj272b9jv000kzsyfjkl52385","content":"<blockquote>\n<p>一直对vue很感兴趣，最近使用vue2.0开发了高仿饿了么点餐系统来练练手，不得不说vue真是一个很不错的框架，但是也遇到过一些坑，在这里和大家分享一下</p>\n</blockquote>\n<h1 id=\"饿了么点餐系统\"><a href=\"#饿了么点餐系统\" class=\"headerlink\" title=\"饿了么点餐系统\"></a>饿了么点餐系统</h1><blockquote>\n<p>vue2.0、vuex、vue-router、axios、webpack、eslint、better-scroll</p>\n</blockquote>\n<h2 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h2><p><a href=\"https://simonzhangiter.github.io/VueDemo_Sell_Eleme\" target=\"_blank\">在线演示戳我</a>（请使用chrome开发者手机演示模式预览）</p>\n<h3 id=\"移动端演示\"><a href=\"#移动端演示\" class=\"headerlink\" title=\"移动端演示\"></a>移动端演示</h3><p>扫二维码在手机上查看效果更好</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/0207/180535_4FSI_2493500.png\" width=\"25%\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ul>\n<li>购物车</li>\n<li>购买物品小球飞入动画</li>\n<li>评价star组件</li>\n<li>商品添加、删除组件</li>\n<li>优惠图标组件</li>\n<li>目录、列表联动滚动</li>\n<li>画廊</li>\n<li>评论的是否满意和内容筛选</li>\n<li>商品列表页面</li>\n<li>店铺评价页面</li>\n<li>商家介绍页面</li>\n<li>优惠活动页面</li>\n<li>商品详情页面</li>\n</ul>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>vue有自己的脚手架构建工具vue-cli,使用起来非常方便，使用webpack来集成各种开发便捷工具，比如：</p>\n<ul>\n<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>\n<li>PostCss，再也不用去管兼容性的问题了，只针对chrome写css代码，会自动编译生成支持多款浏览器的css代码</li>\n<li>Eslint，统一代码风格，规避低级错误，对于有代码洁癖的人来说是绝对的好东西，不过有些地方的代码校验有时候也挺麻烦的-.-</li>\n<li>bable，ES2015出来已经有一段时间了，但是不少浏览器还没有兼容ES6.有了bable，放心使用ES6语法，它会自动转义成ES5语法。</li>\n<li>Stylus，类似于SASS/SCSS，但是可以不写{}和“：”，使用起来还是很方便的</li>\n<li>…</li>\n</ul>\n<p>除此之外，vue-cli已经使用node配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便</p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><p>vue非常好的融合了react的组件化思想和angular的指令思想。<br>一个vue的组件将HTML、CSS、JS代码写在一个文件里面，这样既方便编写，也方便管理和修改</p>\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><p>在vue1.x的时候，vue的官方推荐HTTP请求工具是vue-resource，但是在vue2.0的时候将推荐工具改成了axios。</p>\n<p>使用方式都差不多，但需要注意的是：接口返回的res并不直接是返回的数据，而是经过axios本身处理过的json对象。真正的数据在res.data里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.get(url).then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.data = res.data</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>vue提供了一个数据管理工具vuex，有点类似于angular中factory和service，可以进行数据上的通信。<br>比如存储一些公共变量或者是不同组件间的数据处理等。</p>\n<p>这个有一些高级用法在这里不细说，想要了解的可以去官方文档看，有中文版本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">    increment(state) &#123;</div><div class=\"line\">      state.count++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue-Router\"></a>Vue-Router</h3><p>vue-router是vue的路由系统，可以用来创建单页应用。基本思想是在主页面中引入<router-view>标签，然后定义路由，把router挂在到app上，然后把各个子页面渲染到view里面。使用起来还是很方便的，<br>跳转页面只需要</router-view></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.push(<span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h3><p>vue2.0废除了v-el指令，所有的节点指令修改为ref，然后通过ref来获取元素节点，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"testHook\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">...js code</div><div class=\"line\">this.$ref.testHook</div></pre></td></tr></table></figure>\n<h3 id=\"组件间的通信\"><a href=\"#组件间的通信\" class=\"headerlink\" title=\"组件间的通信\"></a>组件间的通信</h3><p>一。如果是和子组件通信，则使用ref就可以实现，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"testHook\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">...js code</div><div class=\"line\">this.$ref.testHook.add() //调用test子组件的add方法</div></pre></td></tr></table></figure>\n<p>二。使用emit来发送广播</p>\n<p>vue2提供了一套广播机制，即一边发送广播，一边接收广播来执行相应操作。使用方法如下：</p>\n<p>比如想要给test组件发送一个“相加”广播:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:&#123;</div><div class=\"line\">  \tclick()&#123;</div><div class=\"line\">  \t  Vue.$emit(<span class=\"string\">'add'</span>,&#123;&#125;) <span class=\"comment\">//第二个参数可作为传递数据传送到监听端口，不需要则传空对象</span></div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么test组件中就需要监听，在created方法里写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  created()&#123;</div><div class=\"line\">   Vue.$on(<span class=\"string\">'add'</span>,<span class=\"keyword\">this</span>.add)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">method</span>:&#123;</div><div class=\"line\">  \tadd()&#123;</div><div class=\"line\">  \t  <span class=\"keyword\">this</span>.count++</div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了以上总结的这点小的知识点以外，还有很多vue的知识想要和大家分享，以后会陆续写出来，大家感兴趣的也可以来我的GitHub一起来写这个项目（觉得不错的给个star Hah）</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># install dependencies</span></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># serve with hot reload at localhost:8080</span></div><div class=\"line\">npm run dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># build for production with minification</span></div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<h2 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h2><p><img src=\"https://static.oschina.net/uploads/space/2017/0207/110250_3uWi_2493500.jpeg\" width=\"40%\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cloud.githubusercontent.com/assets/20501873/24188896/ff2c5910-0f1d-11e7-80c0-bc28fd84fe80.png\" width=\"40%\"></p>\n<h2 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h2><p>欢迎热爱学习、忠于分享的胖友一起来交流</p>\n<ul>\n<li><p>QQ：745913574</p>\n</li>\n<li><p>QQ群：149683643</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直对vue很感兴趣，最近使用vue2.0开发了高仿饿了么点餐系统来练练手，不得不说vue真是一个很不错的框架，但是也遇到过一些坑，在这里和大家分享一下</p>\n</blockquote>\n<h1 id=\"饿了么点餐系统\"><a href=\"#饿了么点餐系统\" class=\"headerlink\" title=\"饿了么点餐系统\"></a>饿了么点餐系统</h1><blockquote>\n<p>vue2.0、vuex、vue-router、axios、webpack、eslint、better-scroll</p>\n</blockquote>\n<h2 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h2><p><a href=\"https://simonzhangiter.github.io/VueDemo_Sell_Eleme\" target=\"_blank\">在线演示戳我</a>（请使用chrome开发者手机演示模式预览）</p>\n<h3 id=\"移动端演示\"><a href=\"#移动端演示\" class=\"headerlink\" title=\"移动端演示\"></a>移动端演示</h3><p>扫二维码在手机上查看效果更好</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/0207/180535_4FSI_2493500.png\" width=\"25%\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ul>\n<li>购物车</li>\n<li>购买物品小球飞入动画</li>\n<li>评价star组件</li>\n<li>商品添加、删除组件</li>\n<li>优惠图标组件</li>\n<li>目录、列表联动滚动</li>\n<li>画廊</li>\n<li>评论的是否满意和内容筛选</li>\n<li>商品列表页面</li>\n<li>店铺评价页面</li>\n<li>商家介绍页面</li>\n<li>优惠活动页面</li>\n<li>商品详情页面</li>\n</ul>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>vue有自己的脚手架构建工具vue-cli,使用起来非常方便，使用webpack来集成各种开发便捷工具，比如：</p>\n<ul>\n<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>\n<li>PostCss，再也不用去管兼容性的问题了，只针对chrome写css代码，会自动编译生成支持多款浏览器的css代码</li>\n<li>Eslint，统一代码风格，规避低级错误，对于有代码洁癖的人来说是绝对的好东西，不过有些地方的代码校验有时候也挺麻烦的-.-</li>\n<li>bable，ES2015出来已经有一段时间了，但是不少浏览器还没有兼容ES6.有了bable，放心使用ES6语法，它会自动转义成ES5语法。</li>\n<li>Stylus，类似于SASS/SCSS，但是可以不写{}和“：”，使用起来还是很方便的</li>\n<li>…</li>\n</ul>\n<p>除此之外，vue-cli已经使用node配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便</p>\n<h2 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h2><p>vue非常好的融合了react的组件化思想和angular的指令思想。<br>一个vue的组件将HTML、CSS、JS代码写在一个文件里面，这样既方便编写，也方便管理和修改</p>\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><p>在vue1.x的时候，vue的官方推荐HTTP请求工具是vue-resource，但是在vue2.0的时候将推荐工具改成了axios。</p>\n<p>使用方式都差不多，但需要注意的是：接口返回的res并不直接是返回的数据，而是经过axios本身处理过的json对象。真正的数据在res.data里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.get(url).then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.data = res.data</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>vue提供了一个数据管理工具vuex，有点类似于angular中factory和service，可以进行数据上的通信。<br>比如存储一些公共变量或者是不同组件间的数据处理等。</p>\n<p>这个有一些高级用法在这里不细说，想要了解的可以去官方文档看，有中文版本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">    increment(state) &#123;</div><div class=\"line\">      state.count++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue-Router\"></a>Vue-Router</h3><p>vue-router是vue的路由系统，可以用来创建单页应用。基本思想是在主页面中引入<router-view>标签，然后定义路由，把router挂在到app上，然后把各个子页面渲染到view里面。使用起来还是很方便的，<br>跳转页面只需要</router-view></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.push(<span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h3><p>vue2.0废除了v-el指令，所有的节点指令修改为ref，然后通过ref来获取元素节点，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"testHook\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">...js code</div><div class=\"line\">this.$ref.testHook</div></pre></td></tr></table></figure>\n<h3 id=\"组件间的通信\"><a href=\"#组件间的通信\" class=\"headerlink\" title=\"组件间的通信\"></a>组件间的通信</h3><p>一。如果是和子组件通信，则使用ref就可以实现，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"testHook\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">...js code</div><div class=\"line\">this.$ref.testHook.add() //调用test子组件的add方法</div></pre></td></tr></table></figure>\n<p>二。使用emit来发送广播</p>\n<p>vue2提供了一套广播机制，即一边发送广播，一边接收广播来执行相应操作。使用方法如下：</p>\n<p>比如想要给test组件发送一个“相加”广播:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:&#123;</div><div class=\"line\">  \tclick()&#123;</div><div class=\"line\">  \t  Vue.$emit(<span class=\"string\">'add'</span>,&#123;&#125;) <span class=\"comment\">//第二个参数可作为传递数据传送到监听端口，不需要则传空对象</span></div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么test组件中就需要监听，在created方法里写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  created()&#123;</div><div class=\"line\">   Vue.$on(<span class=\"string\">'add'</span>,<span class=\"keyword\">this</span>.add)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">method</span>:&#123;</div><div class=\"line\">  \tadd()&#123;</div><div class=\"line\">  \t  <span class=\"keyword\">this</span>.count++</div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了以上总结的这点小的知识点以外，还有很多vue的知识想要和大家分享，以后会陆续写出来，大家感兴趣的也可以来我的GitHub一起来写这个项目（觉得不错的给个star Hah）</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># install dependencies</span></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># serve with hot reload at localhost:8080</span></div><div class=\"line\">npm run dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># build for production with minification</span></div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<h2 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h2><p><img src=\"https://static.oschina.net/uploads/space/2017/0207/110250_3uWi_2493500.jpeg\" width=\"40%\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cloud.githubusercontent.com/assets/20501873/24188896/ff2c5910-0f1d-11e7-80c0-bc28fd84fe80.png\" width=\"40%\"></p>\n<h2 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h2><p>欢迎热爱学习、忠于分享的胖友一起来交流</p>\n<ul>\n<li><p>QQ：745913574</p>\n</li>\n<li><p>QQ群：149683643</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj272b9fk0000zsyfuuqln0oz","category_id":"cj272b9fq0002zsyf6ub7p74i","_id":"cj272b9fv0006zsyffml1uiwx"},{"post_id":"cj272b9fo0001zsyfujzc0ali","category_id":"cj272b9fq0002zsyf6ub7p74i","_id":"cj272b9fx0009zsyfbr6vf32v"},{"post_id":"cj272b9jq000gzsyfa5lya1wi","category_id":"cj272b9fq0002zsyf6ub7p74i","_id":"cj272b9jy000nzsyfuenufv2n"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","category_id":"cj272b9jv000izsyfdmymersz","_id":"cj272b9k0000rzsyfs00eh398"},{"post_id":"cj272b9jv000kzsyfjkl52385","category_id":"cj272b9jz000pzsyf9axup1rn","_id":"cj272b9k1000tzsyfj7fcvrub"}],"PostTag":[{"post_id":"cj272b9fk0000zsyfuuqln0oz","tag_id":"cj272b9fs0003zsyf43ycbuuk","_id":"cj272b9fw0008zsyfman5oo4y"},{"post_id":"cj272b9fk0000zsyfuuqln0oz","tag_id":"cj272b9ft0005zsyft1xu88jr","_id":"cj272b9fx000azsyfe7h3er9y"},{"post_id":"cj272b9fo0001zsyfujzc0ali","tag_id":"cj272b9fs0003zsyf43ycbuuk","_id":"cj272b9fz000czsyftr03rrzn"},{"post_id":"cj272b9fo0001zsyfujzc0ali","tag_id":"cj272b9ft0005zsyft1xu88jr","_id":"cj272b9fz000dzsyf6zwvef7k"},{"post_id":"cj272b9jq000gzsyfa5lya1wi","tag_id":"cj272b9fs0003zsyf43ycbuuk","_id":"cj272b9jx000mzsyfq8faxyk3"},{"post_id":"cj272b9jq000gzsyfa5lya1wi","tag_id":"cj272b9ft0005zsyft1xu88jr","_id":"cj272b9jy000ozsyfbehapmt0"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9jv000jzsyfp5e3mzro","_id":"cj272b9k8000yzsyf24dwagl0"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9jz000qzsyfeu6fpr3l","_id":"cj272b9k8000zzsyf3p0hznj7"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9k0000szsyfdzx8y8jh","_id":"cj272b9k90011zsyf8265zzns"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9k2000uzsyfwyrssjxb","_id":"cj272b9ka0012zsyfc3dxxpiz"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9ft0005zsyft1xu88jr","_id":"cj272b9ka0014zsyf0c2yfv86"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9k3000vzsyfa9md3d1k","_id":"cj272b9ka0015zsyfka59n17s"},{"post_id":"cj272b9jl000ezsyf2m3uvkfc","tag_id":"cj272b9k5000wzsyfh4auzrmu","_id":"cj272b9kb0017zsyfk5msopp4"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9jv000jzsyfp5e3mzro","_id":"cj272b9kc0019zsyff6pd6rx4"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9jz000qzsyfeu6fpr3l","_id":"cj272b9kc001azsyfrotjv95q"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9k0000szsyfdzx8y8jh","_id":"cj272b9kc001bzsyfhurydy3c"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9k3000vzsyfa9md3d1k","_id":"cj272b9kd001czsyfa32nlcdh"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9k5000wzsyfh4auzrmu","_id":"cj272b9kd001dzsyfihepbcuq"},{"post_id":"cj272b9jv000kzsyfjkl52385","tag_id":"cj272b9ft0005zsyft1xu88jr","_id":"cj272b9ke001ezsyf7u9wlqhz"}],"Tag":[{"name":"JavaScript","_id":"cj272b9fs0003zsyf43ycbuuk"},{"name":"ES6","_id":"cj272b9ft0005zsyft1xu88jr"},{"name":"vue","_id":"cj272b9jv000jzsyfp5e3mzro"},{"name":"vue-router","_id":"cj272b9jz000qzsyfeu6fpr3l"},{"name":"vuex","_id":"cj272b9k0000szsyfdzx8y8jh"},{"name":"echarts","_id":"cj272b9k2000uzsyfwyrssjxb"},{"name":"axios","_id":"cj272b9k3000vzsyfa9md3d1k"},{"name":"webpack","_id":"cj272b9k5000wzsyfh4auzrmu"}]}}